/* The following code was generated by JFlex 1.6.1 */


import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/pooria/Desktop/P-Plus-Plus-Compiler/projComp/src/scanner.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\74\1\74\1\1\22\0\1\3\1\44\1\71"+
    "\1\70\1\0\1\56\1\50\1\72\1\61\1\62\1\53\1\54\1\66"+
    "\1\13\1\15\1\55\1\6\11\5\1\65\1\42\1\45\1\43\1\46"+
    "\2\0\4\12\1\17\1\12\5\4\1\14\13\4\1\10\2\4\1\63"+
    "\1\73\1\64\1\52\1\4\1\0\1\27\1\20\1\31\1\36\1\16"+
    "\1\11\1\21\1\33\1\22\1\4\1\30\1\25\1\4\1\23\1\24"+
    "\1\37\1\4\1\26\1\32\1\34\1\35\1\67\1\41\1\7\1\4"+
    "\1\40\1\57\1\51\1\60\1\47\6\0\1\74\u1fa2\0\1\74\1\74"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\3\1\5\1\6"+
    "\16\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\3\1\1"+
    "\1\34\1\35\1\36\1\2\2\36\1\37\2\1\1\2"+
    "\3\1\1\40\1\41\1\0\1\41\1\0\4\3\1\42"+
    "\1\0\1\43\7\3\1\44\1\45\1\3\1\46\1\47"+
    "\17\3\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\0\1\3\1\60\1\36\1\61\1\62\1\0"+
    "\1\41\1\0\2\4\1\63\4\3\1\64\5\3\1\65"+
    "\1\3\1\66\5\3\1\67\14\3\1\0\1\3\1\0"+
    "\1\36\1\4\4\3\1\70\1\3\1\71\1\3\1\72"+
    "\2\3\1\73\3\3\1\74\2\3\1\75\1\76\4\3"+
    "\1\77\3\3\1\60\1\100\1\60\1\4\1\3\1\101"+
    "\2\3\1\102\1\103\1\104\4\3\1\105\5\3\1\106"+
    "\2\3\1\4\2\3\1\107\1\110\1\111\1\112\1\113"+
    "\1\3\1\114\1\115\1\116\1\117\1\3\1\120\1\4"+
    "\1\121\2\3\1\122\1\4\1\123\1\124\12\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\267\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\267\0\u05b8\0\u05f5\0\u0632\0\u066f\0\267\0\267"+
    "\0\267\0\267\0\u06ac\0\u06e9\0\u0726\0\267\0\267\0\267"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\u0763\0\u07a0"+
    "\0\267\0\267\0\u07dd\0\u07dd\0\u081a\0\u0857\0\267\0\u0894"+
    "\0\u08d1\0\u08d1\0\u090e\0\u094b\0\u0988\0\267\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\267\0\u0225"+
    "\0\267\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\364\0\u0d58\0\u0d95\0\364\0\364\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034"+
    "\0\u1071\0\u10ae\0\u10eb\0\u1128\0\267\0\267\0\267\0\267"+
    "\0\267\0\267\0\267\0\267\0\u1165\0\u11a2\0\u11df\0\u121c"+
    "\0\267\0\267\0\u08d1\0\u1259\0\u1259\0\u1296\0\u12d3\0\u1310"+
    "\0\u134d\0\u138a\0\u13c7\0\u1404\0\364\0\u1441\0\u147e\0\u14bb"+
    "\0\u14f8\0\u1535\0\364\0\u1572\0\364\0\u15af\0\u15ec\0\u1629"+
    "\0\u1666\0\u16a3\0\364\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4"+
    "\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc"+
    "\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4"+
    "\0\364\0\u1be1\0\364\0\u1c1e\0\364\0\u1c5b\0\u1c98\0\364"+
    "\0\u1cd5\0\u1d12\0\u1d4f\0\364\0\u1d8c\0\u1dc9\0\364\0\364"+
    "\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\364\0\u1efa\0\u1f37\0\u1f74"+
    "\0\267\0\364\0\u07dd\0\u1fb1\0\u1fee\0\364\0\u202b\0\u2068"+
    "\0\364\0\364\0\364\0\u20a5\0\u20e2\0\u211f\0\u215c\0\364"+
    "\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\364\0\u22ca\0\u2307"+
    "\0\u2344\0\u2381\0\u23be\0\364\0\364\0\364\0\364\0\364"+
    "\0\u23fb\0\364\0\364\0\364\0\364\0\u2438\0\364\0\u2475"+
    "\0\364\0\u24b2\0\u24ef\0\364\0\u252c\0\364\0\364\0\u2569"+
    "\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751"+
    "\0\u278e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\7\1\10\2\6\1\11\1\6"+
    "\1\12\1\6\1\13\1\14\1\6\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\6\1\25\1\26"+
    "\1\6\1\27\1\30\1\31\3\6\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\2\4\1\63"+
    "\2\5\1\64\51\63\1\65\12\63\1\66\1\67\1\63"+
    "\1\70\1\63\1\71\2\5\1\72\51\71\1\73\12\71"+
    "\1\74\1\71\1\4\1\75\1\71\101\0\7\6\1\0"+
    "\1\6\1\0\24\6\25\0\1\6\12\0\2\7\5\0"+
    "\1\76\1\77\2\100\62\0\2\101\2\102\3\0\1\76"+
    "\1\77\2\100\61\0\7\6\1\0\1\6\1\0\6\6"+
    "\1\103\1\104\1\6\1\105\5\6\1\106\4\6\25\0"+
    "\1\6\12\0\1\7\1\10\4\0\1\107\1\0\1\110"+
    "\25\0\1\111\36\0\2\77\72\0\3\6\1\112\3\6"+
    "\1\0\1\6\1\0\5\6\1\113\1\6\1\114\14\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\1\115"+
    "\5\6\1\116\1\6\1\117\13\6\25\0\1\6\11\0"+
    "\7\6\1\0\1\6\1\0\6\6\1\120\15\6\25\0"+
    "\1\6\11\0\5\6\1\121\1\6\1\0\1\6\1\0"+
    "\5\6\1\122\16\6\25\0\1\6\11\0\7\6\1\0"+
    "\1\6\1\0\6\6\1\123\15\6\25\0\1\6\11\0"+
    "\5\6\1\124\1\6\1\0\1\6\1\0\10\6\1\125"+
    "\6\6\1\126\4\6\25\0\1\6\11\0\7\6\1\0"+
    "\1\6\1\0\6\6\1\127\15\6\25\0\1\6\11\0"+
    "\7\6\1\0\1\6\1\0\1\130\23\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\5\6\1\131\11\6"+
    "\1\132\4\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\6\6\1\133\2\6\1\134\3\6\1\135\6\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\4\6"+
    "\1\136\11\6\1\137\4\6\1\140\25\0\1\6\11\0"+
    "\7\6\1\0\1\6\1\0\10\6\1\141\13\6\25\0"+
    "\1\6\11\0\7\6\1\0\1\6\1\0\5\6\1\142"+
    "\16\6\25\0\1\6\11\0\7\6\1\0\1\6\1\0"+
    "\1\143\5\6\1\144\15\6\25\0\1\6\50\0\1\145"+
    "\74\0\1\146\74\0\1\147\74\0\1\150\74\0\1\151"+
    "\36\0\1\7\1\10\6\0\1\110\25\0\1\152\10\0"+
    "\1\153\63\0\1\154\24\0\1\155\10\0\7\6\1\0"+
    "\1\6\1\0\6\6\1\156\15\6\25\0\1\6\75\0"+
    "\1\157\4\0\1\63\2\0\66\63\1\0\1\63\1\0"+
    "\2\63\2\0\65\63\1\160\1\0\1\63\1\0\2\63"+
    "\2\0\65\63\1\157\1\0\1\63\1\0\1\63\1\161"+
    "\2\0\71\161\73\0\1\162\72\0\1\155\1\0\1\162"+
    "\72\0\1\157\1\0\1\162\2\0\1\163\2\0\71\163"+
    "\6\0\2\77\7\0\2\100\62\0\2\164\4\0\1\165"+
    "\40\0\1\165\25\0\2\101\6\0\1\77\2\100\62\0"+
    "\1\166\1\167\2\0\2\166\3\0\3\166\6\0\1\166"+
    "\1\0\1\166\4\0\1\166\42\0\7\6\1\0\1\6"+
    "\1\0\10\6\1\170\13\6\25\0\1\6\11\0\7\6"+
    "\1\0\1\6\1\0\6\6\1\171\15\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\7\6\1\172\14\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\5\6"+
    "\1\173\16\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\16\6\1\174\5\6\25\0\1\6\11\0\7\6"+
    "\1\0\1\6\1\0\20\6\1\175\3\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\14\6\1\176\7\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\3\6"+
    "\1\177\20\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\6\6\1\200\15\6\25\0\1\6\11\0\7\6"+
    "\1\0\1\6\1\0\1\201\23\6\25\0\1\6\11\0"+
    "\7\6\1\0\1\6\1\0\16\6\1\202\5\6\25\0"+
    "\1\6\11\0\7\6\1\0\1\6\1\0\16\6\1\203"+
    "\2\6\1\204\2\6\25\0\1\6\11\0\7\6\1\0"+
    "\1\6\1\0\16\6\1\205\5\6\25\0\1\6\11\0"+
    "\7\6\1\0\1\6\1\0\16\6\1\206\5\6\25\0"+
    "\1\6\11\0\7\6\1\0\1\6\1\0\5\6\1\207"+
    "\16\6\25\0\1\6\11\0\7\6\1\0\1\6\1\0"+
    "\13\6\1\210\2\6\1\211\2\6\1\212\2\6\25\0"+
    "\1\6\11\0\7\6\1\0\1\6\1\0\20\6\1\213"+
    "\3\6\25\0\1\6\11\0\7\6\1\0\1\6\1\0"+
    "\16\6\1\214\5\6\25\0\1\6\11\0\7\6\1\0"+
    "\1\6\1\0\5\6\1\215\16\6\25\0\1\6\11\0"+
    "\7\6\1\0\1\6\1\0\14\6\1\216\7\6\25\0"+
    "\1\6\11\0\7\6\1\0\1\6\1\0\11\6\1\217"+
    "\12\6\25\0\1\6\11\0\7\6\1\0\1\6\1\0"+
    "\22\6\1\220\1\6\25\0\1\6\11\0\7\6\1\0"+
    "\1\6\1\0\10\6\1\221\1\222\12\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\4\6\1\223\17\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\17\6"+
    "\1\224\4\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\16\6\1\225\5\6\25\0\1\6\11\0\5\6"+
    "\1\226\1\6\1\0\1\6\1\0\24\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\17\6\1\227\4\6"+
    "\25\0\1\6\5\0\70\155\1\230\4\155\4\0\7\6"+
    "\1\0\1\6\1\0\4\6\1\231\17\6\25\0\1\6"+
    "\5\0\1\157\1\232\1\0\72\157\1\160\2\155\65\160"+
    "\1\233\1\155\1\160\1\155\1\160\5\0\2\164\73\0"+
    "\2\234\2\0\2\234\1\0\1\76\1\0\3\234\6\0"+
    "\1\234\1\0\1\234\4\0\1\234\43\0\1\166\1\167"+
    "\2\0\2\166\1\0\1\76\1\0\3\166\6\0\1\166"+
    "\1\0\1\166\4\0\1\166\42\0\7\6\1\0\1\6"+
    "\1\0\1\235\23\6\25\0\1\6\11\0\7\6\1\0"+
    "\1\6\1\0\11\6\1\236\12\6\25\0\1\6\11\0"+
    "\7\6\1\0\1\6\1\0\14\6\1\224\7\6\25\0"+
    "\1\6\11\0\7\6\1\0\1\6\1\0\13\6\1\237"+
    "\10\6\25\0\1\6\11\0\7\6\1\0\1\6\1\0"+
    "\1\240\23\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\1\241\23\6\25\0\1\6\11\0\7\6\1\0"+
    "\1\6\1\0\4\6\1\242\17\6\25\0\1\6\11\0"+
    "\7\6\1\0\1\6\1\0\7\6\1\243\14\6\25\0"+
    "\1\6\11\0\7\6\1\0\1\6\1\0\11\6\1\244"+
    "\12\6\25\0\1\6\11\0\7\6\1\0\1\6\1\0"+
    "\6\6\1\245\15\6\25\0\1\6\11\0\7\6\1\0"+
    "\1\6\1\0\17\6\1\246\4\6\25\0\1\6\11\0"+
    "\7\6\1\0\1\6\1\0\21\6\1\247\2\6\25\0"+
    "\1\6\11\0\7\6\1\0\1\6\1\0\3\6\1\250"+
    "\20\6\25\0\1\6\11\0\7\6\1\0\1\6\1\0"+
    "\6\6\1\251\15\6\25\0\1\6\11\0\7\6\1\0"+
    "\1\6\1\0\17\6\1\252\4\6\25\0\1\6\11\0"+
    "\7\6\1\0\1\6\1\0\1\253\23\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\6\6\1\254\15\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\14\6"+
    "\1\255\1\6\1\256\5\6\25\0\1\6\11\0\7\6"+
    "\1\0\1\6\1\0\1\257\23\6\25\0\1\6\11\0"+
    "\7\6\1\0\1\6\1\0\10\6\1\260\13\6\25\0"+
    "\1\6\11\0\7\6\1\0\1\6\1\0\1\261\23\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\4\6"+
    "\1\262\17\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\16\6\1\263\5\6\25\0\1\6\11\0\7\6"+
    "\1\0\1\6\1\0\16\6\1\264\5\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\1\265\23\6\25\0"+
    "\1\6\11\0\7\6\1\0\1\6\1\0\4\6\1\266"+
    "\17\6\25\0\1\6\11\0\7\6\1\0\1\6\1\0"+
    "\11\6\1\267\12\6\25\0\1\6\11\0\7\6\1\0"+
    "\1\6\1\0\2\6\1\270\21\6\25\0\1\6\5\0"+
    "\55\155\1\271\12\155\1\230\4\155\4\0\7\6\1\0"+
    "\1\6\1\0\20\6\1\272\3\6\25\0\1\6\7\0"+
    "\1\271\72\0\1\160\2\155\52\160\1\273\12\160\1\233"+
    "\1\155\1\160\1\155\1\160\5\0\2\274\2\0\2\274"+
    "\1\0\1\76\1\0\3\274\6\0\1\274\1\0\1\274"+
    "\4\0\1\274\42\0\7\6\1\0\1\6\1\0\11\6"+
    "\1\275\12\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\16\6\1\276\5\6\25\0\1\6\11\0\7\6"+
    "\1\0\1\6\1\0\16\6\1\277\5\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\10\6\1\300\13\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\5\6"+
    "\1\301\16\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\12\6\1\302\11\6\25\0\1\6\11\0\7\6"+
    "\1\0\1\6\1\0\16\6\1\303\5\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\17\6\1\304\4\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\10\6"+
    "\1\305\13\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\10\6\1\306\13\6\25\0\1\6\11\0\7\6"+
    "\1\0\1\6\1\0\11\6\1\307\12\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\16\6\1\310\5\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\4\6"+
    "\1\311\17\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\6\6\1\312\15\6\25\0\1\6\11\0\7\6"+
    "\1\0\1\6\1\0\5\6\1\313\16\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\4\6\1\314\17\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\13\6"+
    "\1\315\10\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\7\6\1\316\14\6\25\0\1\6\11\0\7\6"+
    "\1\0\1\6\1\0\17\6\1\317\4\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\7\6\1\320\14\6"+
    "\25\0\1\6\12\0\2\321\2\0\2\321\1\0\1\76"+
    "\1\0\3\321\6\0\1\321\1\0\1\321\4\0\1\321"+
    "\42\0\7\6\1\0\1\6\1\0\13\6\1\322\10\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\4\6"+
    "\1\323\17\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\5\6\1\324\16\6\25\0\1\6\11\0\7\6"+
    "\1\0\1\6\1\0\16\6\1\325\5\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\20\6\1\326\3\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\5\6"+
    "\1\327\16\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\16\6\1\330\5\6\25\0\1\6\11\0\7\6"+
    "\1\0\1\6\1\0\5\6\1\331\16\6\25\0\1\6"+
    "\11\0\5\6\1\332\1\6\1\0\1\6\1\0\24\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\3\6"+
    "\1\333\20\6\25\0\1\6\11\0\7\6\1\0\1\6"+
    "\1\0\13\6\1\334\10\6\25\0\1\6\11\0\7\6"+
    "\1\0\1\6\1\0\15\6\1\335\6\6\25\0\1\6"+
    "\11\0\7\6\1\0\1\6\1\0\7\6\1\336\14\6"+
    "\25\0\1\6\11\0\7\6\1\0\1\6\1\0\1\337"+
    "\23\6\25\0\1\6\12\0\2\340\2\0\2\340\1\0"+
    "\1\76\1\0\3\340\6\0\1\340\1\0\1\340\4\0"+
    "\1\340\42\0\7\6\1\0\1\6\1\0\15\6\1\341"+
    "\6\6\25\0\1\6\11\0\7\6\1\0\1\6\1\0"+
    "\6\6\1\342\15\6\25\0\1\6\11\0\7\6\1\0"+
    "\1\6\1\0\17\6\1\343\4\6\25\0\1\6\11\0"+
    "\7\6\1\0\1\6\1\0\16\6\1\344\5\6\25\0"+
    "\1\6\12\0\2\345\2\0\2\345\1\0\1\76\1\0"+
    "\3\345\6\0\1\345\1\0\1\345\4\0\1\345\42\0"+
    "\7\6\1\0\1\6\1\0\5\6\1\346\16\6\25\0"+
    "\1\6\11\0\7\6\1\0\1\6\1\0\1\347\23\6"+
    "\25\0\1\6\12\0\2\350\2\0\2\350\1\0\1\76"+
    "\1\0\3\350\6\0\1\350\1\0\1\350\4\0\1\350"+
    "\43\0\2\351\2\0\2\351\1\0\1\76\1\0\3\351"+
    "\6\0\1\351\1\0\1\351\4\0\1\351\43\0\2\352"+
    "\2\0\2\352\1\0\1\76\1\0\3\352\6\0\1\352"+
    "\1\0\1\352\4\0\1\352\43\0\2\353\2\0\2\353"+
    "\1\0\1\76\1\0\3\353\6\0\1\353\1\0\1\353"+
    "\4\0\1\353\43\0\2\354\2\0\2\354\1\0\1\76"+
    "\1\0\3\354\6\0\1\354\1\0\1\354\4\0\1\354"+
    "\43\0\2\355\2\0\2\355\1\0\1\76\1\0\3\355"+
    "\6\0\1\355\1\0\1\355\4\0\1\355\43\0\2\356"+
    "\2\0\2\356\1\0\1\76\1\0\3\356\6\0\1\356"+
    "\1\0\1\356\4\0\1\356\43\0\2\357\2\0\2\357"+
    "\1\0\1\76\1\0\3\357\6\0\1\357\1\0\1\357"+
    "\4\0\1\357\43\0\2\360\2\0\2\360\1\0\1\76"+
    "\1\0\3\360\6\0\1\360\1\0\1\360\4\0\1\360"+
    "\43\0\2\361\2\0\2\361\1\0\1\76\1\0\3\361"+
    "\6\0\1\361\1\0\1\361\4\0\1\361\52\0\1\76"+
    "\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10187];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\24\1\1\11\4\1\4\11\3\1\11\11"+
    "\2\1\2\11\4\1\1\11\6\1\1\11\1\1\1\0"+
    "\1\1\1\0\4\1\1\11\1\0\1\11\33\1\10\11"+
    "\1\0\3\1\2\11\1\0\1\1\1\0\42\1\1\0"+
    "\1\1\1\0\36\1\1\11\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }
    StringBuilder string = new StringBuilder();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("shit");throw new Error("Illegal character <"+yytext()+">");
            }
          case 85: break;
          case 2: 
            { /*return symbol(sym.WHITE, yytext() );*/
            }
          case 86: break;
          case 3: 
            { return symbol(sym.ID, yytext() );
            }
          case 87: break;
          case 4: 
            { return symbol(sym.INT_CONST, yytext() );
            }
          case 88: break;
          case 5: 
            { return symbol(sym.MINUS,yytext());
            }
          case 89: break;
          case 6: 
            { return symbol(sym.DOT, yytext() );
            }
          case 90: break;
          case 7: 
            { return symbol(sym.SEMI,yytext());
            }
          case 91: break;
          case 8: 
            { return symbol(sym.EQUAL,yytext());
            }
          case 92: break;
          case 9: 
            { return symbol(sym.EXCLEM,yytext());
            }
          case 93: break;
          case 10: 
            { return symbol(sym.SMALLER,yytext());
            }
          case 94: break;
          case 11: 
            { return symbol(sym.BIGGER,yytext());
            }
          case 95: break;
          case 12: 
            { return symbol(sym.TILDA,yytext());
            }
          case 96: break;
          case 13: 
            { return symbol(sym.AND,yytext());
            }
          case 97: break;
          case 14: 
            { return symbol(sym.OR,yytext());
            }
          case 98: break;
          case 15: 
            { return symbol(sym.CAROT,yytext());
            }
          case 99: break;
          case 16: 
            { return symbol(sym.MULT,yytext());
            }
          case 100: break;
          case 17: 
            { return symbol(sym.PLUS,yytext());
            }
          case 101: break;
          case 18: 
            { return symbol(sym.DIVIDE,yytext());
            }
          case 102: break;
          case 19: 
            { return symbol(sym.MOD,yytext());
            }
          case 103: break;
          case 20: 
            { return symbol(sym.OPENCURLBRAK,yytext());
            }
          case 104: break;
          case 21: 
            { return symbol(sym.CLOSEDCURLBRAK,yytext());
            }
          case 105: break;
          case 22: 
            { return symbol(sym.OPENPRANTHES,yytext());
            }
          case 106: break;
          case 23: 
            { return symbol(sym.CLOSEDPRANTHES,yytext());
            }
          case 107: break;
          case 24: 
            { return symbol(sym.OPENBRAK,yytext());
            }
          case 108: break;
          case 25: 
            { return symbol(sym.CLOSEDBRAK,yytext());
            }
          case 109: break;
          case 26: 
            { return symbol(sym.DOUBLEDOT,yytext());
            }
          case 110: break;
          case 27: 
            { return symbol(sym.COMMA,yytext());
            }
          case 111: break;
          case 28: 
            { yybegin(STRING); string.setLength(0); string.append("\"");
            }
          case 112: break;
          case 29: 
            { yybegin(CHAR);
            }
          case 113: break;
          case 30: 
            { string.append( yytext() );
            }
          case 114: break;
          case 31: 
            { yybegin(YYINITIAL); StringBuilder temp = string ; string = new StringBuilder(); return symbol(sym.STRING_CONST, temp.toString() );
            }
          case 115: break;
          case 32: 
            { return symbol(sym.LONG_CONST, yytext() );
            }
          case 116: break;
          case 33: 
            { return symbol(sym.REAL_CONST, yytext() );
            }
          case 117: break;
          case 34: 
            { return symbol(sym.MM,yytext());
            }
          case 118: break;
          case 35: 
            { return symbol(sym.MINUSASSIGN,yytext());
            }
          case 119: break;
          case 36: 
            { return symbol(sym.IF, yytext() ) ;
            }
          case 120: break;
          case 37: 
            { return symbol(sym.IN,yytext());
            }
          case 121: break;
          case 38: 
            { return symbol(sym.OF,yytext());
            }
          case 122: break;
          case 39: 
            { return symbol(sym.ORC,yytext());
            }
          case 123: break;
          case 40: 
            { return symbol(sym.EQEQUAL,yytext());
            }
          case 124: break;
          case 41: 
            { return symbol(sym.NOTEQUAL,yytext());
            }
          case 125: break;
          case 42: 
            { return symbol(sym.SMALLEQUAL,yytext());
            }
          case 126: break;
          case 43: 
            { return symbol(sym.BIGEQUAL,yytext());
            }
          case 127: break;
          case 44: 
            { return symbol(sym.MULTASSIGN,yytext());
            }
          case 128: break;
          case 45: 
            { return symbol(sym.PLUSASSIGN,yytext());
            }
          case 129: break;
          case 46: 
            { return symbol(sym.PP,yytext());
            }
          case 130: break;
          case 47: 
            { return symbol(sym.DIVIDEASSIGN,yytext());
            }
          case 131: break;
          case 48: 
            { 
            }
          case 132: break;
          case 49: 
            { string.append(yytext()  );
            }
          case 133: break;
          case 50: 
            { yybegin(YYINITIAL); return symbol(sym.CHAR_CONST, yytext() );
            }
          case 134: break;
          case 51: 
            { return symbol(sym.FOR, yytext() ) ;
            }
          case 135: break;
          case 52: 
            { return symbol(sym.END, yytext() ) ;
            }
          case 136: break;
          case 53: 
            { return symbol(sym.INT, yytext() ) ;
            }
          case 137: break;
          case 54: 
            { return symbol(sym.NOTC,yytext());
            }
          case 138: break;
          case 55: 
            { return symbol(sym.ANDC,yytext());
            }
          case 139: break;
          case 56: 
            { return symbol(sym.ELSE, yytext() ) ;
            }
          case 140: break;
          case 57: 
            { return symbol(sym.BOOL, yytext() ) ;
            }
          case 141: break;
          case 58: 
            { return symbol(sym.GOTO, yytext() ) ;
            }
          case 142: break;
          case 59: 
            { return symbol(sym.LONG, yytext() ) ;
            }
          case 143: break;
          case 60: 
            { return symbol(sym.AUTO,yytext());
            }
          case 144: break;
          case 61: 
            { return symbol(sym.CASE, yytext() ) ;
            }
          case 145: break;
          case 62: 
            { return symbol(sym.CHAR, yytext() ) ;
            }
          case 146: break;
          case 63: 
            { return symbol(sym.BOOL_CONST, yytext() ) ;
            }
          case 147: break;
          case 64: 
            { return symbol(sym.VOID,yytext());
            }
          case 148: break;
          case 65: 
            { return symbol(sym.FLOAT, yytext() ) ;
            }
          case 149: break;
          case 66: 
            { return symbol(sym.BEGIN, yytext() ) ;
            }
          case 150: break;
          case 67: 
            { return symbol(sym.BREAK, yytext() ) ;
            }
          case 151: break;
          case 68: 
            { return symbol(sym.INPUT, yytext() ) ;
            }
          case 152: break;
          case 69: 
            { return symbol(sym.CONST, yytext() ) ;
            }
          case 153: break;
          case 70: 
            { return symbol(sym.UNITL,yytext());
            }
          case 154: break;
          case 71: 
            { return symbol(sym.EXTERN, yytext() ) ;
            }
          case 155: break;
          case 72: 
            { return symbol(sym.OUTPUT, yytext() ) ;
            }
          case 156: break;
          case 73: 
            { return symbol(sym.RECORD, yytext() ) ;
            }
          case 157: break;
          case 74: 
            { return symbol(sym.RETURN, yytext() ) ;
            }
          case 158: break;
          case 75: 
            { return symbol(sym.REPEAT,yytext());
            }
          case 159: break;
          case 76: 
            { return symbol(sym.SIZEOF, yytext() ) ;
            }
          case 160: break;
          case 77: 
            { return symbol(sym.STRING, yytext() ) ;
            }
          case 161: break;
          case 78: 
            { return symbol(sym.STATIC, yytext() ) ;
            }
          case 162: break;
          case 79: 
            { return symbol(sym.SWITCH, yytext() ) ;
            }
          case 163: break;
          case 80: 
            { return symbol(sym.DOUBLE, yytext() ) ;
            }
          case 164: break;
          case 81: 
            { return symbol(sym.FOREACH,yytext());
            }
          case 165: break;
          case 82: 
            { return symbol(sym.DEFAULT, yytext() ) ;
            }
          case 166: break;
          case 83: 
            { return symbol(sym.FUNCTION, yytext() ) ;
            }
          case 167: break;
          case 84: 
            { return symbol(sym.CONTINUE, yytext() ) ;
            }
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
