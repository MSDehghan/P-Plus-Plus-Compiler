
import java_cup.runtime.*;
import java.util.ArrayList;
import AST.*;
import AST.block.* ;
import AST.declaration.* ;
import AST.exp.* ;
import AST.exp.binaryExp.* ;
import AST.exp.binaryExp.arithmatic.* ;
import AST.exp.binaryExp.conditional.* ;
import AST.exp.consts.* ;
import AST.exp.unaryExpression.* ;
import AST.exp.var.* ;
import AST.statement.* ;
import AST.statement.loop.* ;
import AST.statement.cond.* ;
import AST.SymbolTable.* ;
import AST.SymbolTable.dscp.* ;
import java.util.ArrayList;
import preDefinedValues.*;
import AST.exp.assignments.*;



parser code {:
	boolean DEBUGS = true;

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");


        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};



terminal ID ; 
terminal SEMI ; 
terminal EXTERN ; 
terminal OPENBRAK ; 
terminal CLOSEDBRAK ; 
terminal INT ; 
terminal BOOL ; 
terminal FLOAT ; 
terminal LONG ; 
terminal CHAR ; 
terminal DOUBLE ; 
terminal STRING ; 
terminal VOID ; 
terminal AUTO ; 
terminal RECORD ; 
terminal BEGIN ; 
terminal END ; 
terminal CONST ; 
terminal COMMA ; 
terminal EQUAL ; 
terminal BEINGQ ; 
terminal ENDQ ; 
terminal RETURN ; 
terminal BREAK ; 
terminal CONTINUE ; 
terminal SIZEOF ; 
terminal IF ; 
terminal ELSE ; 
terminal SWITCH ; 
terminal OPENPRANTHES ; 
terminal CLOSEDPRANTHES ; 
terminal OPENCURLBRAK ; 
terminal CLOSEDCURLBRAK ; 
terminal OF ; 
terminal CASE ; 
terminal INT_CONST ; 
terminal DOUBLEDOT ; 
terminal FOR ; 
terminal REPEAT ; 
terminal UNITL ; 
terminal FOREACH ; 
terminal IN ; 
terminal MINUS ; 
terminal PLUS ; 
terminal EXCLEM ; 
terminal MM ; 
terminal PP ; 
terminal TILDA ; 
terminal MULT ; 
terminal DIVIDE ; 
terminal MOD ; 
terminal OR ; 
terminal AND ; 
terminal CAROT ; 
terminal EQEQUAL ; 
terminal NOTEQUAL ; 
terminal BIGEQUAL ; 
terminal SMALLEQUAL ; 
terminal SMALLER ; 
terminal BIGGER ; 
terminal ANDC ; 
terminal ORC ; 
terminal NOTC ; 
terminal REAL_CONST ; 
terminal CHAR_CONST ; 
terminal BOOL_CONST ; 
terminal STRING_CONST ; 
terminal LONG_CONST ; 
terminal DEFAULT ; 
terminal UMINUS;



terminal FALSE;
terminal GOTO;
terminal INPUT;
terminal FUNCTION ;
terminal OUTPUT ;
terminal STATIC ;
terminal TRUE ;
terminal PLUSEQUAL;
terminal MINUSEQUAL;
terminal MULTEQUAL;
terminal DIVIDEEQUAL;
terminal DOT ;
terminal PLUSASSIGN;
terminal MINUSASSIGN;
terminal DIVIDEASSIGN;
terminal MULTASSIGN;





nonterminal program ; 
nonterminal var_dcl ; 
nonterminal func_extern ; 
nonterminal struct_dec ; 
nonterminal func_dcl ; 
nonterminal extern_dcl ; 
nonterminal type ; 
nonterminal arguments ; 
nonterminal block ; 
nonterminal var_dcl_cnt ; 
nonterminal variable ; 
nonterminal expr ; 
nonterminal statement ; 
nonterminal assignment ; 
nonterminal method_call ; 
nonterminal cond_stmt ; 
nonterminal loop_stmt ; 
nonterminal parameters ; 
nonterminal binary_op ; 
nonterminal const_val ; 
nonterminal arithmatic ; 
nonterminal conditional ; 
nonterminal exp6 ; 
nonterminal exp10 ; 
nonterminal exp13 ; 
nonterminal exp15 ; 
nonterminal exp20 ; 
nonterminal exp23 ;





/* Precedences */
precedence right EQUAL;
precedence left OR;
precedence left CAROT;
precedence left AND;
precedence left EQEQUAL, NOTEQUAL;
precedence left ANDC, ORC;
precedence left SMALLEQUAL,SMALLER, BIGEQUAL, BIGGER;
precedence left PLUS, MINUS;
precedence left MULT, DIVIDE, MOD;
precedence right EXCLEM;
precedence left  OPENBRAK, CLOSEDBRAK, OPENPRANTHES, CLOSEDPRANTHES;
precedence right PP, MM, NOTC;
precedence right TILDA;
precedence left DOT ;
precedence left UMINUS;








/* first */
program 	::=		var_dcl:e       program 	{: if( DEBUGS ){ System.out.println("program found"); } main.program.add((Node)e); :}
			|		func_extern:e	program		{: if( DEBUGS ){ System.out.println("program found"); } main.program.add((Node)e);:}
			|		struct_dec:e	program		{: if( DEBUGS ){ System.out.println("program found"); } main.program.add((Node)e);:}
			|						
			; 



/* second */

func_extern 	::=		func_dcl:e 	{: if( DEBUGS ){ System.out.println("func extern found"); } RESULT = e ; :}
				|		extern_dcl:e 	{: if( DEBUGS ){ System.out.println("func extern found"); } RESULT = e ; :}
				;


/* third */

func_dcl		::=		FUNCTION type:e1 ID:e2 OPENPRANTHES arguments:e3 CLOSEDPRANTHES SEMI     	    {: if( DEBUGS ){ System.out.println("func dcl found"); } RESULT = new FunctionDeclaration((ArrayList <PairPooria <String,Integer> >)e3, (String)e1, (String)e2, null) ; :}
				|		FUNCTION type:e1 ID:e2 OPENPRANTHES arguments:e3 CLOSEDPRANTHES block:e4        {: if( DEBUGS ){ System.out.println("func dcl found"); } RESULT = new FunctionDeclaration((ArrayList <PairPooria <String,Integer> >)e3, (String)e1, (String)e2, (Block)e4) ;:}
				|		FUNCTION type:e1 ID:e2 OPENPRANTHES CLOSEDPRANTHES SEMI 	                    {: if( DEBUGS ){ System.out.println("func dcl found"); } RESULT = new FunctionDeclaration( null, (String)e1, (String)e2, null) ;:}
				|		FUNCTION type:e1 ID:e2 OPENPRANTHES CLOSEDPRANTHES block:e4      	            {: if( DEBUGS ){ System.out.println("func dcl found"); } RESULT = new FunctionDeclaration( null, (String)e1, (String)e2, (Block)e4) ;:}
				;

/* forth */

extern_dcl		::=		EXTERN type:e1 ID:e2 SEMI	                {: if( DEBUGS ){ System.out.println("extern dcl found"); } RESULT = new ExternalFunctionDcl((String)e1, (String)e2);:}
				;


/* fifth */
arguments 		::=		type:e1 ID exp6:e2 COMMA arguments:e3	    {: if( DEBUGS ){ System.out.println("arguments found"); }ArrayList <PairPooria> a = (ArrayList <PairPooria>)e3   ; a.add(new PairPooria<String, Integer>((String)e1, (Integer)e2)); RESULT = a ; :}
				|		type:e1 ID exp6:e2		                    {: if( DEBUGS ){ System.out.println("arguments found"); }ArrayList <PairPooria> a = new ArrayList <PairPooria>() ; a.add(new PairPooria<String, Integer>((String)e1, (Integer)e2)); RESULT = a ; :}
				;



exp6 			::=		OPENBRAK CLOSEDBRAK exp6:e	{: if( DEBUGS ){ System.out.println("exp6 found"); } RESULT = (Integer)e + 1;:}
				|	                                {: if( DEBUGS ){ System.out.println("exp6 found"); } RESULT = new Integer(0); :}
				;

/* sixth */
type	::=	INT:e 		{: if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; :}
		|	BOOL:e 		{: if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; :}
		|	FLOAT:e		{: if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; :}
		|	LONG:e 		{: if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; :}
		|	CHAR:e 		{: if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; :}
		|	DOUBLE:e	{: if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; :}
		|	ID:e		{: if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; :}
		|	STRING:e	{: if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; :}
		|	VOID:e		{: if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; :}
		|	AUTO:e		{: if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; :}
		;


/* seventh */
struct_dec	::=	RECORD ID:e1 BEGIN var_dcl:e2 exp10:e3 END RECORD SEMI  {: if( DEBUGS ){ System.out.println("struct dec found"); }ArrayList <DCLS> a = (ArrayList <DCLS>) e3 ;a.add((DCLS)e2); RESULT = new StructDeclaration(a,(String)e1); :}
			;
exp10		::=	var_dcl:e1 exp10:e2		    {: if( DEBUGS ){ System.out.println("exp10 found"); } ArrayList <DCLS> a = (ArrayList <DCLS>) e2 ; a.add((DCLS)e1); RESULT = a ; :}
			|				                {: if( DEBUGS ){ System.out.println("exp10 found"); } ArrayList <DCLS> a = new ArrayList <DCLS>() ; RESULT = a ; :}
			;

/* eightth */
var_dcl 	::=	CONST type:e1 var_dcl_cnt:e2 exp13:e3 SEMI	{: if( DEBUGS ){ System.out.println("var_dcl found"); }ArrayList <SpecClass> a = (ArrayList <SpecClass>) e3; a.add((SpecClass)e2); RESULT = new DCLS(a,(String)e1,true); :}
			|	type:e1 var_dcl_cnt:e2 exp13:e3 SEMI		{: if( DEBUGS ){ System.out.println("var_dcl found"); }ArrayList <SpecClass> a = (ArrayList <SpecClass>) e3; a.add((SpecClass)e2); RESULT = new DCLS(a,(String)e1,false); :}
			;
			
exp13		::=	COMMA var_dcl_cnt:e1 exp13:e2   	        {: if( DEBUGS ){ System.out.println("exp13 found"); }ArrayList <SpecClass> a = (ArrayList <SpecClass>) e2; a.add((SpecClass)e1); RESULT = a ; :}
			|			                                    {: if( DEBUGS ){ System.out.println("exp13 found"); } RESULT = new ArrayList <SpecClass>() ; :}
			;

/* nineth */
//TODO the meaning had to change for it to mage sense
var_dcl_cnt		::=		ID:v EQUAL expr:e	{: if( DEBUGS ){ System.out.println("var dcl cnt found"); }RESULT = new SpecClass((String)v, null, (Exp)e); ; :}
				|		ID:e1 exp23:e2		{: if( DEBUGS ){ System.out.println("var dcl cnt found"); }RESULT = new SpecClass((String)e1, (ArrayList <Exp>)e2, null); :}
				;

/* tenth */
block		::=		BEGIN exp15:e END			{: if( DEBUGS ){ System.out.println("block found"); } RESULT = new Block((ArrayList <OperationCode>)e) ; :}
			;
exp15		::=		var_dcl:e1 exp15:e2			{: if( DEBUGS ){ System.out.println("exp15 found var"); }   ArrayList <OperationCode> a = (ArrayList <OperationCode>) e2 ; a.add((OperationCode)e1); RESULT = a; :}
			|		statement:e1 exp15:e2		{: if( DEBUGS ){ System.out.println("exp15 found state"); } ArrayList <OperationCode> a = (ArrayList <OperationCode>) e2 ; a.add((OperationCode)e1); RESULT = a; :}
			|  									{: if( DEBUGS ){ System.out.println("exp15 found empty"); } RESULT = new ArrayList <OperationCode>(); :}
			;

/* eleventh */
statement		::=		expr:e SEMI			{: if( DEBUGS ){ System.out.println("statement found"); } RESULT = new ExpressionStatement((Exp)e); :}
				|		cond_stmt:e			{: if( DEBUGS ){ System.out.println("statement found"); } RESULT = e ;:}
				|		loop_stmt:e			{: if( DEBUGS ){ System.out.println("statement found"); } RESULT = e ;:}
				|		RETURN expr:e SEMI	{: if( DEBUGS ){ System.out.println("statement found"); } RESULT = new Return((Exp)e) ;:}
				|		RETURN SEMI			{: if( DEBUGS ){ System.out.println("statement found"); } RESULT = new Return() ;:}
				|		BREAK SEMI			{: if( DEBUGS ){ System.out.println("statement found"); } RESULT = new Break()  ;:}
				|		CONTINUE SEMI		{: if( DEBUGS ){ System.out.println("statement found"); } RESULT = new Continue();:}
				;

/* twelveth */
assignment		::=		variable:v EQUAL expr:e		        {: if( DEBUGS ){ System.out.println("assignment found"); } RESULT = new Assignment((Variable)v,(Exp)e); :}
                |       variable:v PLUSASSIGN expr:e        {: if( DEBUGS ){ System.out.println("assignment found"); } RESULT = new PlusAssign((Variable)v,(Exp)e); :}
                |       variable:v MINUSASSIGN expr:e       {: if( DEBUGS ){ System.out.println("assignment found"); } RESULT = new MinusAssign((Variable)v,(Exp)e); :}
                |       variable:v DIVIDEASSIGN expr:e      {: if( DEBUGS ){ System.out.println("assignment found"); } RESULT = new DivideAssign((Variable)v,(Exp)e); :}
                |       variable:v MULTASSIGN expr:e        {: if( DEBUGS ){ System.out.println("assignment found"); } RESULT = new MultAssign((Variable)v,(Exp)e); :}
				;

/* thirteenth */
method_call		::=		ID:e OPENPRANTHES parameters:e1 CLOSEDPRANTHES		{: if( DEBUGS ){ System.out.println("method found"); } RESULT = new MethodCall((String)e, (ArrayList<Exp>)e1); :}
				|		ID:e OPENPRANTHES  CLOSEDPRANTHES		{: if( DEBUGS ){ System.out.println("method found");  } RESULT = new MethodCall((String)e,new ArrayList<Exp>()); :}
				;

/* fourteenth */
parameters		::=		expr:e	{: if( DEBUGS ){ System.out.println("parameters found"); } ArrayList <Exp> a = new ArrayList<Exp>();	 a.add((Exp)e); RESULT = a; :}
				|		expr:e COMMA parameters:e1	{: if( DEBUGS ){ System.out.println("parameters found"); } ((ArrayList <Exp>)e1).add((Exp)e); RESULT = e1; :}
				;


/* fifteenth */
cond_stmt		::=		IF OPENPRANTHES expr:e1 CLOSEDPRANTHES block:e2 ELSE block:e3	{: if( DEBUGS ){ System.out.println("cond_stmt found"); } RESULT = new If((Exp)e1,(Block)e2,(Block)e3) ; :}
				|		IF OPENPRANTHES expr:e1 CLOSEDPRANTHES block:e2 				{: if( DEBUGS ){ System.out.println("cond_stmt found"); } RESULT = new If((Exp)e1,(Block)e2,null) ;:}
				|		SWITCH OPENPRANTHES ID:e1 CLOSEDPRANTHES OF DOUBLEDOT BEGIN exp20:e2  DEFAULT DOUBLEDOT block:e3 END	{: if( DEBUGS ){ System.out.println("cond_stmt found"); } RESULT = new Switch((String)e1, (ArrayList <Case>)e2, (Block) e3) ; :}
				;
exp20			::=		CASE INT_CONST:e1 DOUBLEDOT block:e2 exp20:e3		{: if( DEBUGS ){ System.out.println("exp20 found"); } ArrayList <Case> a = (ArrayList <Case>)e3; a.add(new Case(new IntConstExp(HelperFunctions.parseInt((String)e1)),(Block)e2)); RESULT = a ;  :}
				|														{: if( DEBUGS ){ System.out.println("exp20 found"); } RESULT = new ArrayList <Case>() ;:}
				;



/* sixteenth */
loop_stmt 		::=		FOR OPENPRANTHES assignment:e1 SEMI expr:e2  SEMI assignment:e3 CLOSEDPRANTHES block:e4		{: if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new For((Block)e4,(Assignment)e1,(Exp)e2,(Exp)e3); :}
				|		FOR OPENPRANTHES assignment:e1 SEMI expr:e2 SEMI expr:e3 CLOSEDPRANTHES block:e4			{: if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new For((Block)e4,(Assignment)e1,(Exp)e2,(Exp)e3); :}
				|		FOR OPENPRANTHES assignment:e1 SEMI expr:e2 SEMI CLOSEDPRANTHES block:e4					{: if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new For((Block)e4,(Assignment)e1,(Exp)e2, null); :}
				|		FOR OPENPRANTHES SEMI expr:e2 SEMI assignment:e3 CLOSEDPRANTHES block:e4					{: if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new For((Block)e4,null,(Exp)e2,(Exp)e3); :}
				|		FOR OPENPRANTHES SEMI expr:e2 SEMI expr:e3 CLOSEDPRANTHES block:e4							{: if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new For((Block)e4,null,(Exp)e2,(Exp)e3); :}
				|		FOR OPENPRANTHES SEMI expr:e2 SEMI CLOSEDPRANTHES block:e4									{: if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new For((Block)e4,null,(Exp)e2,null); :}
				|		REPEAT block:e1 UNITL OPENPRANTHES expr:e2 CLOSEDPRANTHES SEMI								{: if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new Repeat((Block)e1,(Exp)e2);:}
				|		FOREACH OPENPRANTHES ID:e1 IN ID:e2 CLOSEDPRANTHES block:e3									{: if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new ForEach((Block)e3, (String)e1, (String)e2); :}
				;








/* eighteenth */
expr		::=		expr:e1  binary_op:e2  expr:e3			{: if( DEBUGS ){ System.out.println("expr found"); }RESULT = ((BinaryExp)e2).SetBinaryExp((Exp)e1,(Exp)e3);  :}
			|		OPENPRANTHES expr:e  CLOSEDPRANTHES	{: if( DEBUGS ){ System.out.println("expr found"); } Parentheses a = new Parentheses(); a.setUnary((Exp)e); RESULT = a ; :}
			|		method_call:e	{: if( DEBUGS ){ System.out.println("expr found"); } RESULT = e;  :}
			|		variable:e		{: if( DEBUGS ){ System.out.println("expr found"); } RESULT = e ; :}
			|		const_val:e		{: if( DEBUGS ){ System.out.println("expr found"); }RESULT = e; :}
			|		MINUS expr:e {: if( DEBUGS ){ System.out.println("expr found"); }Unary a = new AST.exp.unaryExpression.Minus();a.setUnary((Exp)e) ;RESULT = a; :}	%prec  UMINUS
			|		TILDA expr:e	{: if( DEBUGS ){ System.out.println("expr found"); } Unary a = new AST.exp.unaryExpression.Not();a.setUnary((Exp)e) ;RESULT = a;:}
			|		assignment:e 	{:if( DEBUGS ){ System.out.println("expr found"); }RESULT = e;:}
			|		MM variable:e	{: if( DEBUGS ){ System.out.println("variable found"); } MMPrefix a = new MMPrefix() ; a.setUnary((Exp)e) ;RESULT = a; :}
			|		PP variable:e	{: if( DEBUGS ){ System.out.println("variable found"); } PPPrefix a = new PPPrefix() ; a.setUnary((Exp)e) ;RESULT = a;:}
			|		variable:e MM	{: if( DEBUGS ){ System.out.println("variable found"); } MMPostfix a = new MMPostfix() ; a.setUnary((Exp)e) ;RESULT = a;:}
			|		variable:e PP	{: if( DEBUGS ){ System.out.println("variable found"); } PPPostfix a = new PPPostfix() ; a.setUnary((Exp)e) ;RESULT = a;:}
			|		SIZEOF OPENPRANTHES type:e CLOSEDPRANTHES		{: if( DEBUGS ){ System.out.println("statement found"); } RESULT = new SizeOf((String)e); :}
			;//TODO type needs to have a method for computing its type



/* tweenth */
variable		::=		ID:e1 exp23:e2	{: if( DEBUGS ){ System.out.println("variable found"); }  if(((ArrayList <Exp>)e2).size()==0){RESULT = new SimpleVariable((String)e1);}else{RESULT = new ArrayVariable((String)e1,(ArrayList <Exp>)e2);}:}
			    |       variable:e1 DOT variable:e2 {:if( DEBUGS ){ System.out.println("variable found"); } RESULT = new RecordVariableUse((Variable)e1, (Variable)e2);  :}
				;

exp23			::=		OPENBRAK expr:e2 CLOSEDBRAK exp23 : e1	{: if( DEBUGS ){ System.out.println("exp32 found"); } ArrayList <Exp> a=(ArrayList <Exp>)e1;a.add((Exp)e2); RESULT = a; :}
				|	{: if( DEBUGS ){ System.out.println("exp23 found"); } RESULT = new ArrayList <Exp>() ; :}
				;



/* tweny first */
binary_op		::=		arithmatic:e	{: if( DEBUGS ){ System.out.println("binary op found");RESULT = (BinaryExp)e; } :}
				|		conditional:e	{: if( DEBUGS ){ System.out.println("binary op found"); }RESULT = (BinaryExp)e; :}
				;

/* twenty second */
arithmatic		::=		PLUS	{: if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Plus();:}
				|		MINUS	{: if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Minus();:}
				|		MULT	{: if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Mult();:}
				|		DIVIDE	{: if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Divide();:}
				|		MOD		{: if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Mod();:}
				|		AND		{: if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.And();:}
				|		OR		{: if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Or();:}
				|		CAROT	{: if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Carot();:}
				;


/* twenty third */
conditional		::=		EQEQUAL		{: if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new EqEqual(); :}
				|		NOTEQUAL	{: if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new NotEqual();:}
				|		BIGEQUAL	{: if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new GreaterEqual();:}
				|		SMALLEQUAL	{: if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new SmallerEqual();:}
				|		SMALLER		{: if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new Smaller();:}
				|		BIGGER		{: if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new Greater(); :}
				|		ANDC		{: if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new AST.exp.binaryExp.conditional.And();:}
				|		ORC			{: if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new AST.exp.binaryExp.conditional.Or();:}
				|		NOTC		{: if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new AST.exp.binaryExp.conditional.Not();:}
				;


/* twenty fourth */
const_val		::=		INT_CONST:e		{: if( DEBUGS ){ System.out.println("const val found by INT_CONST"); } RESULT = new IntConstExp(HelperFunctions.parseInt((String)e)) ; :}
				|		REAL_CONST:e		{: if( DEBUGS ){ System.out.println("const val found by REAL_CONST"); } RESULT = new RealConstExp(Double.parseDouble((String)e)); :}
				|		CHAR_CONST:e		{: if( DEBUGS ){ System.out.println("const val found by CHAR_CONST"); } RESULT = new CharConstExp(((String)e).charAt(0)) ; :}
				|		BOOL_CONST:e		{: if( DEBUGS ){ System.out.println("const val found by BOOL_CONST"); } RESULT = new BooleanConstExp(((String)e).equals("true" )? true : false ) ; :}
				|		STRING_CONST:e	{: if( DEBUGS ){ System.out.println("const val found by STRING_CONST"); } RESULT = new StringConstExp((String)e); :}
				|		LONG_CONST:e		{: if( DEBUGS ){ System.out.println("const val found by LONG_CONST"); }   :}
				;







