
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import AST.*;
import AST.block.*;
import AST.declaration.*;
import AST.exp.*;
import AST.exp.binaryExp.*;
import AST.exp.binaryExp.arithmatic.*;
import AST.exp.binaryExp.conditional.*;
import AST.exp.consts.*;
import AST.exp.unaryExpression.*;
import AST.exp.var.*;
import AST.statement.*;
import AST.statement.loop.*;
import AST.statement.cond.*;
import AST.SymbolTable.*;
import AST.SymbolTable.dscp.*;
import java.util.ArrayList;
import preDefinedValues.*;
import AST.exp.assignments.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\002\000\002\004\003" +
    "\000\002\004\003\000\002\006\013\000\002\006\013\000" +
    "\002\006\012\000\002\006\012\000\002\036\002\000\002" +
    "\007\006\000\002\011\007\000\002\011\005\000\002\030" +
    "\005\000\002\030\002\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\005\012\000\002\031" +
    "\004\000\002\031\002\000\002\003\007\000\002\003\006" +
    "\000\002\032\005\000\002\032\002\000\002\013\005\000" +
    "\002\013\004\000\002\012\005\000\002\033\004\000\002" +
    "\033\004\000\002\033\002\000\002\016\004\000\002\016" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\020\006\000\002\020\005\000\002\023" +
    "\003\000\002\023\005\000\002\021\011\000\002\021\007" +
    "\000\002\021\016\000\002\034\007\000\002\034\002\000" +
    "\002\022\013\000\002\022\013\000\002\022\012\000\002" +
    "\022\012\000\002\022\012\000\002\022\011\000\002\022" +
    "\011\000\002\022\011\000\002\015\005\000\002\015\005" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\004\000\002\015\004\000\002\015\003\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\006\000\002\014\004\000\002\014\005" +
    "\000\002\035\006\000\002\035\002\000\002\024\003\000" +
    "\002\024\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\040\002\ufffd\004\016\006\004\011\007\012" +
    "\025\013\020\014\005\015\011\016\030\017\017\020\027" +
    "\021\021\022\022\025\023\115\013\001\002\000\026\004" +
    "\016\011\007\012\025\013\020\014\005\015\011\016\030" +
    "\017\017\020\027\021\021\001\002\000\006\004\uffed\042" +
    "\uffed\001\002\000\040\002\ufffd\004\016\006\004\011\007" +
    "\012\025\013\020\014\005\015\011\016\030\017\017\020" +
    "\027\021\021\022\022\025\023\115\013\001\002\000\006" +
    "\004\ufff0\042\ufff0\001\002\000\040\002\ufffb\004\ufffb\006" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\025\ufffb\115\ufffb\001" +
    "\002\000\006\004\uffec\042\uffec\001\002\000\004\004\034" +
    "\001\002\000\026\004\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\001\002" +
    "\000\040\002\ufffc\004\ufffc\006\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\025\ufffc\115\ufffc\001\002\000\004\002\171\001" +
    "\002\000\006\004\uffea\042\uffea\001\002\000\006\004\uffe9" +
    "\042\uffe9\001\002\000\006\004\uffee\042\uffee\001\002\000" +
    "\006\004\uffe7\042\uffe7\001\002\000\004\004\160\001\002" +
    "\000\026\004\016\011\007\012\025\013\020\014\005\015" +
    "\011\016\030\017\017\020\027\021\021\001\002\000\040" +
    "\002\ufffd\004\016\006\004\011\007\012\025\013\020\014" +
    "\005\015\011\016\030\017\017\020\027\021\021\022\022" +
    "\025\023\115\013\001\002\000\006\004\uffef\042\uffef\001" +
    "\002\000\040\002\ufffd\004\016\006\004\011\007\012\025" +
    "\013\020\014\005\015\011\016\030\017\017\020\027\021" +
    "\021\022\022\025\023\115\013\001\002\000\006\004\uffe8" +
    "\042\uffe8\001\002\000\006\004\uffeb\042\uffeb\001\002\000" +
    "\004\002\001\001\002\000\004\002\uffff\001\002\000\004" +
    "\004\034\001\002\000\012\005\uffac\007\044\026\uffac\027" +
    "\045\001\002\000\006\005\uffe0\026\036\001\002\000\004" +
    "\004\034\001\002\000\004\005\040\001\002\000\112\002" +
    "\uffe3\004\uffe3\006\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\024" +
    "\uffe3\025\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\040\uffe3\041\uffe3\047\uffe3\051\uffe3\052\uffe3\054\uffe3\056" +
    "\uffe3\061\uffe3\062\uffe3\063\uffe3\103\uffe3\104\uffe3\105\uffe3" +
    "\106\uffe3\107\uffe3\115\uffe3\001\002\000\006\005\uffe0\026" +
    "\036\001\002\000\004\005\uffe1\001\002\000\006\005\uffde" +
    "\026\uffde\001\002\000\034\004\054\035\050\041\052\047" +
    "\055\056\062\061\060\062\057\063\056\103\061\104\067" +
    "\105\053\106\047\107\065\001\002\000\034\004\054\035" +
    "\050\041\052\047\055\056\062\061\060\062\057\063\056" +
    "\103\061\104\067\105\053\106\047\107\065\001\002\000" +
    "\054\005\uffba\010\uffba\026\uffba\042\uffba\056\uffba\057\uffba" +
    "\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072" +
    "\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba" +
    "\101\uffba\102\uffba\001\002\000\054\005\uff94\010\uff94\026" +
    "\uff94\042\uff94\056\uff94\057\uff94\064\uff94\065\uff94\066\uff94" +
    "\067\uff94\070\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075" +
    "\uff94\076\uff94\077\uff94\100\uff94\101\uff94\102\uff94\001\002" +
    "\000\004\041\152\001\002\000\050\005\uffdf\026\uffdf\056" +
    "\126\057\110\064\124\065\125\066\104\067\111\070\106" +
    "\071\120\072\122\073\114\074\117\075\116\076\112\077" +
    "\105\100\123\101\113\102\121\001\002\000\034\004\054" +
    "\035\050\041\052\047\055\056\062\061\060\062\057\063" +
    "\056\103\061\104\067\105\053\106\047\107\065\001\002" +
    "\000\054\005\uff95\010\uff95\026\uff95\042\uff95\056\uff95\057" +
    "\uff95\064\uff95\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95" +
    "\072\uff95\073\uff95\074\uff95\075\uff95\076\uff95\077\uff95\100" +
    "\uff95\101\uff95\102\uff95\001\002\000\100\005\uffac\007\044" +
    "\010\uffac\026\uffac\027\uffac\041\141\042\uffac\056\uffac\057" +
    "\uffac\061\uffac\062\uffac\064\uffac\065\uffac\066\uffac\067\uffac" +
    "\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac\076" +
    "\uffac\077\uffac\100\uffac\101\uffac\102\uffac\125\uffac\126\uffac" +
    "\127\uffac\130\uffac\131\uffac\001\002\000\054\005\uff98\010" +
    "\uff98\026\uff98\042\uff98\056\uff98\057\uff98\064\uff98\065\uff98" +
    "\066\uff98\067\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074" +
    "\uff98\075\uff98\076\uff98\077\uff98\100\uff98\101\uff98\102\uff98" +
    "\001\002\000\034\004\054\035\050\041\052\047\055\056" +
    "\062\061\060\062\057\063\056\103\061\104\067\105\053" +
    "\106\047\107\065\001\002\000\004\004\100\001\002\000" +
    "\004\004\100\001\002\000\054\005\uff97\010\uff97\026\uff97" +
    "\042\uff97\056\uff97\057\uff97\064\uff97\065\uff97\066\uff97\067" +
    "\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97" +
    "\076\uff97\077\uff97\100\uff97\101\uff97\102\uff97\001\002\000" +
    "\034\004\054\035\050\041\052\047\055\056\062\061\060" +
    "\062\057\063\056\103\061\104\067\105\053\106\047\107" +
    "\065\001\002\000\054\005\uffb5\010\uffb5\026\uffb5\042\uffb5" +
    "\056\uffb5\057\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070" +
    "\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5" +
    "\077\uffb5\100\uffb5\101\uffb5\102\uffb5\001\002\000\074\005" +
    "\uffb9\010\uffb9\026\uffb9\027\073\042\uffb9\056\uffb9\057\uffb9" +
    "\061\076\062\070\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070" +
    "\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9" +
    "\077\uffb9\100\uffb9\101\uffb9\102\uffb9\125\077\126\074\127" +
    "\071\130\075\131\072\001\002\000\054\005\uff93\010\uff93" +
    "\026\uff93\042\uff93\056\uff93\057\uff93\064\uff93\065\uff93\066" +
    "\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93\074\uff93" +
    "\075\uff93\076\uff93\077\uff93\100\uff93\101\uff93\102\uff93\001" +
    "\002\000\054\005\uffb8\010\uffb8\026\uffb8\042\uffb8\056\uffb8" +
    "\057\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071" +
    "\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8" +
    "\100\uffb8\101\uffb8\102\uffb8\001\002\000\054\005\uff96\010" +
    "\uff96\026\uff96\042\uff96\056\uff96\057\uff96\064\uff96\065\uff96" +
    "\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074" +
    "\uff96\075\uff96\076\uff96\077\uff96\100\uff96\101\uff96\102\uff96" +
    "\001\002\000\054\005\uffb1\010\uffb1\026\uffb1\042\uffb1\056" +
    "\uffb1\057\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1" +
    "\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077" +
    "\uffb1\100\uffb1\101\uffb1\102\uffb1\001\002\000\034\004\054" +
    "\035\050\041\052\047\055\056\062\061\060\062\057\063" +
    "\056\103\061\104\067\105\053\106\047\107\065\001\002" +
    "\000\034\004\054\035\050\041\052\047\055\056\062\061" +
    "\060\062\057\063\056\103\061\104\067\105\053\106\047" +
    "\107\065\001\002\000\034\004\054\035\050\041\052\047" +
    "\055\056\062\061\060\062\057\063\056\103\061\104\067" +
    "\105\053\106\047\107\065\001\002\000\034\004\054\035" +
    "\050\041\052\047\055\056\062\061\060\062\057\063\056" +
    "\103\061\104\067\105\053\106\047\107\065\001\002\000" +
    "\034\004\054\035\050\041\052\047\055\056\062\061\060" +
    "\062\057\063\056\103\061\104\067\105\053\106\047\107" +
    "\065\001\002\000\054\005\uffb2\010\uffb2\026\uffb2\042\uffb2" +
    "\056\uffb2\057\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070" +
    "\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2" +
    "\077\uffb2\100\uffb2\101\uffb2\102\uffb2\001\002\000\004\004" +
    "\100\001\002\000\076\005\uffac\007\044\010\uffac\026\uffac" +
    "\027\uffac\042\uffac\056\uffac\057\uffac\061\uffac\062\uffac\064" +
    "\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac" +
    "\073\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac\101" +
    "\uffac\102\uffac\125\uffac\126\uffac\127\uffac\130\uffac\131\uffac" +
    "\001\002\000\074\005\uffae\010\uffae\026\uffae\027\uffae\042" +
    "\uffae\056\uffae\057\uffae\061\uffae\062\uffae\064\uffae\065\uffae" +
    "\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074" +
    "\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102\uffae" +
    "\125\uffae\126\uffae\127\uffae\130\uffae\131\uffae\001\002\000" +
    "\074\005\uffaf\010\uffaf\026\uffaf\027\uffaf\042\uffaf\056\uffaf" +
    "\057\uffaf\061\uffaf\062\uffaf\064\uffaf\065\uffaf\066\uffaf\067" +
    "\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf" +
    "\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\125\uffaf\126" +
    "\uffaf\127\uffaf\130\uffaf\131\uffaf\001\002\000\054\005\uffcf" +
    "\010\uffcf\026\uffcf\042\uffcf\056\126\057\110\064\124\065" +
    "\125\066\104\067\111\070\106\071\120\072\122\073\114" +
    "\074\117\075\116\076\112\077\105\100\123\101\113\102" +
    "\121\001\002\000\034\004\uffa5\035\uffa5\041\uffa5\047\uffa5" +
    "\056\uffa5\061\uffa5\062\uffa5\063\uffa5\103\uffa5\104\uffa5\105" +
    "\uffa5\106\uffa5\107\uffa5\001\002\000\034\004\uff9c\035\uff9c" +
    "\041\uff9c\047\uff9c\056\uff9c\061\uff9c\062\uff9c\063\uff9c\103" +
    "\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\001\002\000\034" +
    "\004\uffa4\035\uffa4\041\uffa4\047\uffa4\056\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4" +
    "\001\002\000\034\004\054\035\050\041\052\047\055\056" +
    "\062\061\060\062\057\063\056\103\061\104\067\105\053" +
    "\106\047\107\065\001\002\000\034\004\uffa9\035\uffa9\041" +
    "\uffa9\047\uffa9\056\uffa9\061\uffa9\062\uffa9\063\uffa9\103\uffa9" +
    "\104\uffa9\105\uffa9\106\uffa9\107\uffa9\001\002\000\034\004" +
    "\uffa3\035\uffa3\041\uffa3\047\uffa3\056\uffa3\061\uffa3\062\uffa3" +
    "\063\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3\001" +
    "\002\000\034\004\uff9d\035\uff9d\041\uff9d\047\uff9d\056\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\103\uff9d\104\uff9d\105\uff9d\106" +
    "\uff9d\107\uff9d\001\002\000\034\004\uff9a\035\uff9a\041\uff9a" +
    "\047\uff9a\056\uff9a\061\uff9a\062\uff9a\063\uff9a\103\uff9a\104" +
    "\uff9a\105\uff9a\106\uff9a\107\uff9a\001\002\000\034\004\uffa0" +
    "\035\uffa0\041\uffa0\047\uffa0\056\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\001\002" +
    "\000\034\004\uffab\035\uffab\041\uffab\047\uffab\056\uffab\061" +
    "\uffab\062\uffab\063\uffab\103\uffab\104\uffab\105\uffab\106\uffab" +
    "\107\uffab\001\002\000\034\004\uff9e\035\uff9e\041\uff9e\047" +
    "\uff9e\056\uff9e\061\uff9e\062\uff9e\063\uff9e\103\uff9e\104\uff9e" +
    "\105\uff9e\106\uff9e\107\uff9e\001\002\000\034\004\uff9f\035" +
    "\uff9f\041\uff9f\047\uff9f\056\uff9f\061\uff9f\062\uff9f\063\uff9f" +
    "\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\001\002\000" +
    "\034\004\uffa2\035\uffa2\041\uffa2\047\uffa2\056\uffa2\061\uffa2" +
    "\062\uffa2\063\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107" +
    "\uffa2\001\002\000\034\004\uff99\035\uff99\041\uff99\047\uff99" +
    "\056\uff99\061\uff99\062\uff99\063\uff99\103\uff99\104\uff99\105" +
    "\uff99\106\uff99\107\uff99\001\002\000\034\004\uffa1\035\uffa1" +
    "\041\uffa1\047\uffa1\056\uffa1\061\uffa1\062\uffa1\063\uffa1\103" +
    "\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\001\002\000\034" +
    "\004\uff9b\035\uff9b\041\uff9b\047\uff9b\056\uff9b\061\uff9b\062" +
    "\uff9b\063\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b" +
    "\001\002\000\034\004\uffa7\035\uffa7\041\uffa7\047\uffa7\056" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\103\uffa7\104\uffa7\105\uffa7" +
    "\106\uffa7\107\uffa7\001\002\000\034\004\uffa6\035\uffa6\041" +
    "\uffa6\047\uffa6\056\uffa6\061\uffa6\062\uffa6\063\uffa6\103\uffa6" +
    "\104\uffa6\105\uffa6\106\uffa6\107\uffa6\001\002\000\034\004" +
    "\uffa8\035\uffa8\041\uffa8\047\uffa8\056\uffa8\061\uffa8\062\uffa8" +
    "\063\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\001" +
    "\002\000\034\004\uffaa\035\uffaa\041\uffaa\047\uffaa\056\uffaa" +
    "\061\uffaa\062\uffaa\063\uffaa\103\uffaa\104\uffaa\105\uffaa\106" +
    "\uffaa\107\uffaa\001\002\000\054\005\uffbc\010\uffbc\026\uffbc" +
    "\042\uffbc\056\126\057\110\064\124\065\125\066\104\067" +
    "\111\070\106\071\120\072\122\073\114\074\117\075\116" +
    "\076\112\077\105\100\123\101\113\102\121\001\002\000" +
    "\054\005\uffd1\010\uffd1\026\uffd1\042\uffd1\056\126\057\110" +
    "\064\124\065\125\066\104\067\111\070\106\071\120\072" +
    "\122\073\114\074\117\075\116\076\112\077\105\100\123" +
    "\101\113\102\121\001\002\000\054\005\uffd2\010\uffd2\026" +
    "\uffd2\042\uffd2\056\126\057\110\064\124\065\125\066\104" +
    "\067\111\070\106\071\120\072\122\073\114\074\117\075" +
    "\116\076\112\077\105\100\123\101\113\102\121\001\002" +
    "\000\054\005\uffce\010\uffce\026\uffce\042\uffce\056\126\057" +
    "\110\064\124\065\125\066\104\067\111\070\106\071\120" +
    "\072\122\073\114\074\117\075\116\076\112\077\105\100" +
    "\123\101\113\102\121\001\002\000\054\005\uffd0\010\uffd0" +
    "\026\uffd0\042\uffd0\056\126\057\110\064\124\065\125\066" +
    "\104\067\111\070\106\071\120\072\122\073\114\074\117" +
    "\075\116\076\112\077\105\100\123\101\113\102\121\001" +
    "\002\000\054\005\uffb7\010\uffb7\026\uffb7\042\uffb7\056\uffb7" +
    "\057\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071" +
    "\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7" +
    "\100\uffb7\101\uffb7\102\uffb7\001\002\000\056\005\uffb4\010" +
    "\uffb4\026\uffb4\042\uffb4\056\uffb4\057\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4" +
    "\125\077\001\002\000\056\005\uffb3\010\uffb3\026\uffb3\042" +
    "\uffb3\056\uffb3\057\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3" +
    "\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076" +
    "\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\125\077\001\002" +
    "\000\054\005\uffb6\010\uffb6\026\uffb6\042\uffb6\056\uffb6\057" +
    "\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6" +
    "\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100" +
    "\uffb6\101\uffb6\102\uffb6\001\002\000\036\004\054\035\050" +
    "\041\052\042\144\047\055\056\062\061\060\062\057\063" +
    "\056\103\061\104\067\105\053\106\047\107\065\001\002" +
    "\000\050\026\146\042\uffcb\056\126\057\110\064\124\065" +
    "\125\066\104\067\111\070\106\071\120\072\122\073\114" +
    "\074\117\075\116\076\112\077\105\100\123\101\113\102" +
    "\121\001\002\000\004\042\145\001\002\000\054\005\uffcc" +
    "\010\uffcc\026\uffcc\042\uffcc\056\uffcc\057\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc" +
    "\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\102" +
    "\uffcc\001\002\000\054\005\uffcd\010\uffcd\026\uffcd\042\uffcd" +
    "\056\uffcd\057\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070" +
    "\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd" +
    "\077\uffcd\100\uffcd\101\uffcd\102\uffcd\001\002\000\034\004" +
    "\054\035\050\041\052\047\055\056\062\061\060\062\057" +
    "\063\056\103\061\104\067\105\053\106\047\107\065\001" +
    "\002\000\004\042\uffca\001\002\000\046\042\151\056\126" +
    "\057\110\064\124\065\125\066\104\067\111\070\106\071" +
    "\120\072\122\073\114\074\117\075\116\076\112\077\105" +
    "\100\123\101\113\102\121\001\002\000\054\005\uffbb\010" +
    "\uffbb\026\uffbb\042\uffbb\056\uffbb\057\uffbb\064\uffbb\065\uffbb" +
    "\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074" +
    "\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb" +
    "\001\002\000\026\004\016\011\007\012\025\013\020\014" +
    "\005\015\011\016\030\017\017\020\027\021\021\001\002" +
    "\000\004\042\154\001\002\000\054\005\uffb0\010\uffb0\026" +
    "\uffb0\042\uffb0\056\uffb0\057\uffb0\064\uffb0\065\uffb0\066\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075" +
    "\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\001\002" +
    "\000\046\010\156\056\126\057\110\064\124\065\125\066" +
    "\104\067\111\070\106\071\120\072\122\073\114\074\117" +
    "\075\116\076\112\077\105\100\123\101\113\102\121\001" +
    "\002\000\076\005\uffac\007\044\010\uffac\026\uffac\027\uffac" +
    "\042\uffac\056\uffac\057\uffac\061\uffac\062\uffac\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac" +
    "\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac\101\uffac\102" +
    "\uffac\125\uffac\126\uffac\127\uffac\130\uffac\131\uffac\001\002" +
    "\000\074\005\uffad\010\uffad\026\uffad\027\uffad\042\uffad\056" +
    "\uffad\057\uffad\061\uffad\062\uffad\064\uffad\065\uffad\066\uffad" +
    "\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075" +
    "\uffad\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad\125\uffad" +
    "\126\uffad\127\uffad\130\uffad\131\uffad\001\002\000\004\023" +
    "\161\001\002\000\030\004\016\011\007\012\025\013\020" +
    "\014\005\015\011\016\030\017\017\020\027\021\021\025" +
    "\023\001\002\000\032\004\016\011\007\012\025\013\020" +
    "\014\005\015\011\016\030\017\017\020\027\021\021\024" +
    "\uffe4\025\023\001\002\000\004\024\166\001\002\000\032" +
    "\004\016\011\007\012\025\013\020\014\005\015\011\016" +
    "\030\017\017\020\027\021\021\024\uffe4\025\023\001\002" +
    "\000\004\024\uffe5\001\002\000\004\022\167\001\002\000" +
    "\004\005\170\001\002\000\040\002\uffe6\004\uffe6\006\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\025\uffe6\115\uffe6\001\002" +
    "\000\004\002\000\001\002\000\026\004\016\011\007\012" +
    "\025\013\020\014\005\015\011\016\030\017\017\020\027" +
    "\021\021\001\002\000\004\004\174\001\002\000\004\041" +
    "\175\001\002\000\030\004\016\011\007\012\025\013\020" +
    "\014\005\015\011\016\030\017\017\020\027\021\021\042" +
    "\177\001\002\000\004\042\340\001\002\000\006\005\211" +
    "\023\210\001\002\000\004\004\201\001\002\000\010\007" +
    "\203\026\ufff1\042\ufff1\001\002\000\006\026\206\042\ufff3" +
    "\001\002\000\004\010\204\001\002\000\010\007\203\026" +
    "\ufff1\042\ufff1\001\002\000\006\026\ufff2\042\ufff2\001\002" +
    "\000\026\004\016\011\007\012\025\013\020\014\005\015" +
    "\011\016\030\017\017\020\027\021\021\001\002\000\004" +
    "\042\ufff4\001\002\000\102\004\223\011\007\012\025\013" +
    "\020\014\005\015\011\016\030\017\017\020\027\021\021" +
    "\024\uffda\025\023\032\225\033\226\034\217\035\050\036" +
    "\222\040\227\041\052\047\055\051\221\052\220\054\230" +
    "\056\062\061\060\062\057\063\056\103\061\104\067\105" +
    "\053\106\047\107\065\001\002\000\040\002\ufff6\004\ufff6" +
    "\006\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\025\ufff6\115\ufff6" +
    "\001\002\000\040\002\ufff6\004\ufff6\006\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\025\ufff6\115\ufff6\001\002\000\040\002" +
    "\ufff7\004\ufff7\006\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\025" +
    "\ufff7\115\ufff7\001\002\000\040\002\ufff8\004\ufff8\006\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\025\ufff8\115\ufff8\001\002" +
    "\000\004\024\337\001\002\000\102\004\223\011\007\012" +
    "\025\013\020\014\005\015\011\016\030\017\017\020\027" +
    "\021\021\024\uffda\025\023\032\225\033\226\034\217\035" +
    "\050\036\222\040\227\041\052\047\055\051\221\052\220" +
    "\054\230\056\062\061\060\062\057\063\056\103\061\104" +
    "\067\105\053\106\047\107\065\001\002\000\004\005\335" +
    "\001\002\000\004\023\210\001\002\000\004\041\276\001" +
    "\002\000\004\041\270\001\002\000\074\004\uffea\005\uffac" +
    "\007\044\027\uffac\041\141\056\uffac\057\uffac\061\uffac\062" +
    "\uffac\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac" +
    "\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100" +
    "\uffac\101\uffac\102\uffac\125\uffac\126\uffac\127\uffac\130\uffac" +
    "\131\uffac\001\002\000\102\004\223\011\007\012\025\013" +
    "\020\014\005\015\011\016\030\017\017\020\027\021\021" +
    "\024\uffda\025\023\032\225\033\226\034\217\035\050\036" +
    "\222\040\227\041\052\047\055\051\221\052\220\054\230" +
    "\056\062\061\060\062\057\063\056\103\061\104\067\105" +
    "\053\106\047\107\065\001\002\000\036\004\054\005\265" +
    "\035\050\041\052\047\055\056\062\061\060\062\057\063" +
    "\056\103\061\104\067\105\053\106\047\107\065\001\002" +
    "\000\004\005\263\001\002\000\004\041\243\001\002\000" +
    "\004\041\235\001\002\000\102\004\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\024\uffd8\025\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\040\uffd8\041\uffd8\047\uffd8\051\uffd8\052\uffd8\054" +
    "\uffd8\056\uffd8\061\uffd8\062\uffd8\063\uffd8\103\uffd8\104\uffd8" +
    "\105\uffd8\106\uffd8\107\uffd8\001\002\000\102\004\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\024\uffd7\025\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7\047\uffd7\051\uffd7" +
    "\052\uffd7\054\uffd7\056\uffd7\061\uffd7\062\uffd7\063\uffd7\103" +
    "\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7\001\002\000\046" +
    "\005\234\056\126\057\110\064\124\065\125\066\104\067" +
    "\111\070\106\071\120\072\122\073\114\074\117\075\116" +
    "\076\112\077\105\100\123\101\113\102\121\001\002\000" +
    "\102\004\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\024\uffd9\025\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9" +
    "\047\uffd9\051\uffd9\052\uffd9\054\uffd9\056\uffd9\061\uffd9\062" +
    "\uffd9\063\uffd9\103\uffd9\104\uffd9\105\uffd9\106\uffd9\107\uffd9" +
    "\001\002\000\004\004\236\001\002\000\004\055\237\001" +
    "\002\000\004\004\240\001\002\000\004\042\241\001\002" +
    "\000\004\023\210\001\002\000\102\004\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\024\uffbd\025\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\040\uffbd\041\uffbd\047\uffbd\051\uffbd\052\uffbd" +
    "\054\uffbd\056\uffbd\061\uffbd\062\uffbd\063\uffbd\103\uffbd\104" +
    "\uffbd\105\uffbd\106\uffbd\107\uffbd\001\002\000\004\004\244" +
    "\001\002\000\004\042\245\001\002\000\004\045\246\001" +
    "\002\000\004\050\247\001\002\000\004\023\250\001\002" +
    "\000\006\046\252\110\uffc5\001\002\000\004\110\257\001" +
    "\002\000\004\047\253\001\002\000\004\050\254\001\002" +
    "\000\004\023\210\001\002\000\006\046\252\110\uffc5\001" +
    "\002\000\004\110\uffc6\001\002\000\004\050\260\001\002" +
    "\000\004\023\210\001\002\000\004\024\262\001\002\000" +
    "\102\004\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\024\uffc7\025\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\041\uffc7" +
    "\047\uffc7\051\uffc7\052\uffc7\054\uffc7\056\uffc7\061\uffc7\062" +
    "\uffc7\063\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7" +
    "\001\002\000\102\004\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\024\uffd4" +
    "\025\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\040" +
    "\uffd4\041\uffd4\047\uffd4\051\uffd4\052\uffd4\054\uffd4\056\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\103\uffd4\104\uffd4\105\uffd4\106" +
    "\uffd4\107\uffd4\001\002\000\046\005\266\056\126\057\110" +
    "\064\124\065\125\066\104\067\111\070\106\071\120\072" +
    "\122\073\114\074\117\075\116\076\112\077\105\100\123" +
    "\101\113\102\121\001\002\000\102\004\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\024\uffd5\025\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\040\uffd5\041\uffd5\047\uffd5\051\uffd5\052\uffd5" +
    "\054\uffd5\056\uffd5\061\uffd5\062\uffd5\063\uffd5\103\uffd5\104" +
    "\uffd5\105\uffd5\106\uffd5\107\uffd5\001\002\000\102\004\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\024\uffd6\025\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\040\uffd6\041\uffd6\047\uffd6\051" +
    "\uffd6\052\uffd6\054\uffd6\056\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\103\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\001\002\000" +
    "\004\024\uffdb\001\002\000\034\004\054\035\050\041\052" +
    "\047\055\056\062\061\060\062\057\063\056\103\061\104" +
    "\067\105\053\106\047\107\065\001\002\000\046\042\272" +
    "\056\126\057\110\064\124\065\125\066\104\067\111\070" +
    "\106\071\120\072\122\073\114\074\117\075\116\076\112" +
    "\077\105\100\123\101\113\102\121\001\002\000\004\023" +
    "\210\001\002\000\104\004\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\024" +
    "\uffc8\025\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\274\040\uffc8\041\uffc8\047\uffc8\051\uffc8\052\uffc8\054" +
    "\uffc8\056\uffc8\061\uffc8\062\uffc8\063\uffc8\103\uffc8\104\uffc8" +
    "\105\uffc8\106\uffc8\107\uffc8\001\002\000\004\023\210\001" +
    "\002\000\102\004\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\024\uffc9\025" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\040\uffc9" +
    "\041\uffc9\047\uffc9\051\uffc9\052\uffc9\054\uffc9\056\uffc9\061" +
    "\uffc9\062\uffc9\063\uffc9\103\uffc9\104\uffc9\105\uffc9\106\uffc9" +
    "\107\uffc9\001\002\000\006\004\100\005\300\001\002\000" +
    "\016\027\073\125\077\126\074\127\071\130\075\131\072" +
    "\001\002\000\034\004\054\035\050\041\052\047\055\056" +
    "\062\061\060\062\057\063\056\103\061\104\067\105\053" +
    "\106\047\107\065\001\002\000\004\005\302\001\002\000" +
    "\034\004\054\035\050\041\052\047\055\056\062\061\060" +
    "\062\057\063\056\103\061\104\067\105\053\106\047\107" +
    "\065\001\002\000\046\005\304\056\126\057\110\064\124" +
    "\065\125\066\104\067\111\070\106\071\120\072\122\073" +
    "\114\074\117\075\116\076\112\077\105\100\123\101\113" +
    "\102\121\001\002\000\036\004\054\035\050\041\052\042" +
    "\306\047\055\056\062\061\060\062\057\063\056\103\061" +
    "\104\067\105\053\106\047\107\065\001\002\000\046\042" +
    "\313\056\126\057\110\064\124\065\125\066\104\067\111" +
    "\070\106\071\120\072\122\073\114\074\117\075\116\076" +
    "\112\077\105\100\123\101\113\102\121\001\002\000\004" +
    "\023\210\001\002\000\046\042\310\056\uffb5\057\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5" +
    "\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101" +
    "\uffb5\102\uffb5\001\002\000\004\023\210\001\002\000\102" +
    "\004\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\024\uffc4\025\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\040\uffc4\041\uffc4\047" +
    "\uffc4\051\uffc4\052\uffc4\054\uffc4\056\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\001" +
    "\002\000\102\004\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\024\uffc2\025" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\040\uffc2" +
    "\041\uffc2\047\uffc2\051\uffc2\052\uffc2\054\uffc2\056\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2" +
    "\107\uffc2\001\002\000\004\023\210\001\002\000\102\004" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\024\uffc3\025\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\040\uffc3\041\uffc3\047\uffc3" +
    "\051\uffc3\052\uffc3\054\uffc3\056\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\001\002" +
    "\000\046\005\316\056\126\057\110\064\124\065\125\066" +
    "\104\067\111\070\106\071\120\072\122\073\114\074\117" +
    "\075\116\076\112\077\105\100\123\101\113\102\121\001" +
    "\002\000\036\004\054\035\050\041\052\042\320\047\055" +
    "\056\062\061\060\062\057\063\056\103\061\104\067\105" +
    "\053\106\047\107\065\001\002\000\046\042\325\056\126" +
    "\057\110\064\124\065\125\066\104\067\111\070\106\071" +
    "\120\072\122\073\114\074\117\075\116\076\112\077\105" +
    "\100\123\101\113\102\121\001\002\000\004\023\210\001" +
    "\002\000\046\042\322\056\uffb5\057\uffb5\064\uffb5\065\uffb5" +
    "\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074" +
    "\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5" +
    "\001\002\000\004\023\210\001\002\000\102\004\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\024\uffc1\025\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\040\uffc1\041\uffc1\047\uffc1\051\uffc1" +
    "\052\uffc1\054\uffc1\056\uffc1\061\uffc1\062\uffc1\063\uffc1\103" +
    "\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\001\002\000\102" +
    "\004\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\024\uffbf\025\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\040\uffbf\041\uffbf\047" +
    "\uffbf\051\uffbf\052\uffbf\054\uffbf\056\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\001" +
    "\002\000\004\023\210\001\002\000\102\004\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\024\uffc0\025\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\040\uffc0\041\uffc0\047\uffc0\051\uffc0\052" +
    "\uffc0\054\uffc0\056\uffc0\061\uffc0\062\uffc0\063\uffc0\103\uffc0" +
    "\104\uffc0\105\uffc0\106\uffc0\107\uffc0\001\002\000\004\053" +
    "\330\001\002\000\004\041\331\001\002\000\034\004\054" +
    "\035\050\041\052\047\055\056\062\061\060\062\057\063" +
    "\056\103\061\104\067\105\053\106\047\107\065\001\002" +
    "\000\046\042\333\056\126\057\110\064\124\065\125\066" +
    "\104\067\111\070\106\071\120\072\122\073\114\074\117" +
    "\075\116\076\112\077\105\100\123\101\113\102\121\001" +
    "\002\000\004\005\334\001\002\000\102\004\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\024\uffbe\025\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\040\uffbe\041\uffbe\047\uffbe\051\uffbe\052" +
    "\uffbe\054\uffbe\056\uffbe\061\uffbe\062\uffbe\063\uffbe\103\uffbe" +
    "\104\uffbe\105\uffbe\106\uffbe\107\uffbe\001\002\000\102\004" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\024\uffd3\025\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\047\uffd3" +
    "\051\uffd3\052\uffd3\054\uffd3\056\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\001\002" +
    "\000\004\024\uffdc\001\002\000\122\002\uffdd\004\uffdd\006" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\046\uffdd\047\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\056\uffdd\061\uffdd\062\uffdd\063\uffdd\103\uffdd\104\uffdd" +
    "\105\uffdd\106\uffdd\107\uffdd\110\uffdd\115\uffdd\001\002\000" +
    "\006\005\341\023\210\001\002\000\040\002\ufff6\004\ufff6" +
    "\006\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\025\ufff6\115\ufff6" +
    "\001\002\000\040\002\ufff6\004\ufff6\006\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\025\ufff6\115\ufff6\001\002\000\040\002" +
    "\ufff9\004\ufff9\006\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\025" +
    "\ufff9\115\ufff9\001\002\000\040\002\ufffa\004\ufffa\006\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\025\ufffa\115\ufffa\001\002" +
    "\000\006\005\uffe0\026\036\001\002\000\004\005\347\001" +
    "\002\000\112\002\uffe2\004\uffe2\006\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\024\uffe2\025\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\040\uffe2\041\uffe2\047\uffe2\051\uffe2\052" +
    "\uffe2\054\uffe2\056\uffe2\061\uffe2\062\uffe2\063\uffe2\103\uffe2" +
    "\104\uffe2\105\uffe2\106\uffe2\107\uffe2\115\uffe2\001\002\000" +
    "\004\002\ufffe\001\002\000\004\004\352\001\002\000\004" +
    "\005\353\001\002\000\040\002\ufff5\004\ufff5\006\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\025\ufff5\115\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\020\002\014\003\025\004\023\005\005\006" +
    "\013\007\007\010\011\001\001\000\004\010\350\001\001" +
    "\000\002\001\001\000\020\002\347\003\025\004\023\005" +
    "\005\006\013\007\007\010\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\344\001" +
    "\001\000\004\036\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\032" +
    "\001\001\000\020\002\031\003\025\004\023\005\005\006" +
    "\013\007\007\010\011\001\001\000\002\001\001\000\020" +
    "\002\030\003\025\004\023\005\005\006\013\007\007\010" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\034\001\001\000" +
    "\004\035\042\001\001\000\004\032\036\001\001\000\004" +
    "\013\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\063\015\154\017\062\020\045\025\065\001" +
    "\001\000\014\014\063\015\050\017\062\020\045\025\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\106\026\114\027\126\001\001\000\014" +
    "\014\063\015\147\017\062\020\045\025\065\001\001\000" +
    "\002\001\001\000\004\035\101\001\001\000\002\001\001" +
    "\000\014\014\063\015\137\017\062\020\045\025\065\001" +
    "\001\000\004\014\136\001\001\000\004\014\135\001\001" +
    "\000\002\001\001\000\014\014\063\015\134\017\062\020" +
    "\045\025\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\063\015\133\017\062\020\045" +
    "\025\065\001\001\000\014\014\063\015\132\017\062\020" +
    "\045\025\065\001\001\000\014\014\063\015\131\017\062" +
    "\020\045\025\065\001\001\000\014\014\063\015\130\017" +
    "\062\020\045\025\065\001\001\000\014\014\063\015\102" +
    "\017\062\020\045\025\065\001\001\000\002\001\001\000" +
    "\004\014\100\001\001\000\004\035\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\106\026\114\027" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\014\063\015\127\017\062\020\045\025" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\024\106\026\114\027\126\001\001\000" +
    "\010\024\106\026\114\027\126\001\001\000\010\024\106" +
    "\026\114\027\126\001\001\000\010\024\106\026\114\027" +
    "\126\001\001\000\010\024\106\026\114\027\126\001\001" +
    "\000\010\024\106\026\114\027\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\106\026\114\027\126" +
    "\001\001\000\016\014\063\015\141\017\062\020\045\023" +
    "\142\025\065\001\001\000\010\024\106\026\114\027\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\063\015\141\017\062\020\045\023\146" +
    "\025\065\001\001\000\002\001\001\000\010\024\106\026" +
    "\114\027\126\001\001\000\002\001\001\000\004\010\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\106\026\114\027\126\001\001\000\004\035\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\161\010" +
    "\011\001\001\000\010\003\163\010\011\031\162\001\001" +
    "\000\002\001\001\000\010\003\163\010\011\031\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\177" +
    "\011\175\001\001\000\002\001\001\000\004\012\211\001" +
    "\001\000\002\001\001\000\004\030\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\204\001\001\000" +
    "\002\001\001\000\006\010\177\011\206\001\001\000\002" +
    "\001\001\000\030\003\215\010\011\014\063\015\232\016" +
    "\223\017\062\020\045\021\230\022\231\025\065\033\214" +
    "\001\001\000\004\036\213\001\001\000\004\036\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\215\010\011\014\063\015\232\016\223\017" +
    "\062\020\045\021\230\022\231\025\065\033\335\001\001" +
    "\000\002\001\001\000\004\012\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\101\001\001\000\030" +
    "\003\215\010\011\014\063\015\232\016\223\017\062\020" +
    "\045\021\230\022\231\025\065\033\266\001\001\000\014" +
    "\014\063\015\263\017\062\020\045\025\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\024\106\026\114\027" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\254\001\001\000" +
    "\004\034\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\106\026\114\027\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\063\015\270\017\062\020\045\025\065" +
    "\001\001\000\010\024\106\026\114\027\126\001\001\000" +
    "\004\012\272\001\001\000\002\001\001\000\004\012\274" +
    "\001\001\000\002\001\001\000\006\014\276\017\300\001" +
    "\001\000\002\001\001\000\014\014\063\015\314\017\062" +
    "\020\045\025\065\001\001\000\002\001\001\000\014\014" +
    "\063\015\302\017\062\020\045\025\065\001\001\000\010" +
    "\024\106\026\114\027\126\001\001\000\014\014\063\015" +
    "\304\017\306\020\045\025\065\001\001\000\010\024\106" +
    "\026\114\027\126\001\001\000\004\012\311\001\001\000" +
    "\002\001\001\000\004\012\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\313\001\001\000\002\001" +
    "\001\000\010\024\106\026\114\027\126\001\001\000\014" +
    "\014\063\015\316\017\320\020\045\025\065\001\001\000" +
    "\010\024\106\026\114\027\126\001\001\000\004\012\323" +
    "\001\001\000\002\001\001\000\004\012\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\063\015\331\017\062\020\045\025\065\001\001" +
    "\000\010\024\106\026\114\027\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\341\001\001\000\004\036" +
    "\343\001\001\000\004\036\342\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	boolean DEBUGS = true;

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");


        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= var_dcl program 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("program found"); } RESULT = ((Program)e1).add((Node)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= func_extern program 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("program found"); } RESULT = ((Program)e1).add((Node)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= struct_dec program 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("program found"); } RESULT = ((Program)e1).add((Node)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("program found"); } RESULT = new Program(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // func_extern ::= func_dcl 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("func extern found"); } RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_extern",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func_extern ::= extern_dcl 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("func extern found"); } RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_extern",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func_dcl ::= FUNCTION globalIndicate type ID OPENPRANTHES arguments CLOSEDPRANTHES SEMI globalIndicate 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if( DEBUGS ){ System.out.println("func dcl found"); } RESULT = new FunctionDeclaration((ArrayList <PairPooria <String,Integer> >)e3, (String)e1, (String)e2, null) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_dcl ::= FUNCTION globalIndicate type ID OPENPRANTHES arguments CLOSEDPRANTHES block globalIndicate 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("func dcl found"); } RESULT = new FunctionDeclaration((ArrayList <PairPooria <String,Integer> >)e3, (String)e1, (String)e2, (Block)e4) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_dcl ::= FUNCTION globalIndicate type ID OPENPRANTHES CLOSEDPRANTHES SEMI globalIndicate 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 if( DEBUGS ){ System.out.println("func dcl found"); } RESULT = new FunctionDeclaration( null, (String)e1, (String)e2, null) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func_dcl ::= FUNCTION globalIndicate type ID OPENPRANTHES CLOSEDPRANTHES block globalIndicate 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("func dcl found"); } RESULT = new FunctionDeclaration( null, (String)e1, (String)e2, (Block)e4) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_dcl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // globalIndicate ::= 
            {
              Object RESULT =null;
		if( DEBUGS ){ System.out.println("func dcl found"); } DefinedValues.changeScope();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalIndicate",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // extern_dcl ::= EXTERN type ID SEMI 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("extern dcl found"); } RESULT = new ExternalFunctionDcl((String)e1, (String)e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extern_dcl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arguments ::= type ID exp6 COMMA arguments 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("arguments found"); }ArrayList <PairPooria> a = (ArrayList <PairPooria>)e3   ; a.add(new PairPooria<String, Integer>((String)e1, (Integer)e2)); RESULT = a ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arguments ::= type ID exp6 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("arguments found"); }ArrayList <PairPooria> a = new ArrayList <PairPooria>() ; a.add(new PairPooria<String, Integer>((String)e1, (Integer)e2)); RESULT = a ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp6 ::= OPENBRAK CLOSEDBRAK exp6 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp6 found"); } RESULT = (Integer)e + 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp6",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp6 ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("exp6 found"); } RESULT = new Integer(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp6",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= BOOL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= LONG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= DOUBLE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= STRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= VOID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= AUTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("type found"); } RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // struct_dec ::= RECORD ID BEGIN var_dcl exp10 END RECORD SEMI 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if( DEBUGS ){ System.out.println("struct dec found"); }ArrayList <DCLS> a = (ArrayList <DCLS>) e3 ;a.add((DCLS)e2); RESULT = new StructDeclaration(a,(String)e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_dec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp10 ::= var_dcl exp10 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp10 found"); } ArrayList <DCLS> a = (ArrayList <DCLS>) e2 ; a.add((DCLS)e1); RESULT = a ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp10",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp10 ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("exp10 found"); } ArrayList <DCLS> a = new ArrayList <DCLS>() ; RESULT = a ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp10",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_dcl ::= CONST type var_dcl_cnt exp13 SEMI 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("var_dcl found"); }ArrayList <SpecClass> a = (ArrayList <SpecClass>) e3; a.add((SpecClass)e2); RESULT = new DCLS(a,(String)e1,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_dcl ::= type var_dcl_cnt exp13 SEMI 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("var_dcl found"); }ArrayList <SpecClass> a = (ArrayList <SpecClass>) e3; a.add((SpecClass)e2); RESULT = new DCLS(a,(String)e1,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp13 ::= COMMA var_dcl_cnt exp13 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp13 found"); }ArrayList <SpecClass> a = (ArrayList <SpecClass>) e2; a.add((SpecClass)e1); RESULT = a ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp13",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp13 ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("exp13 found"); } RESULT = new ArrayList <SpecClass>() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp13",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var_dcl_cnt ::= ID EQUAL expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("var dcl cnt found"); }RESULT = new SpecClass((String)v, null, (Exp)e); ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var_dcl_cnt ::= ID exp23 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("var dcl cnt found"); }RESULT = new SpecClass((String)e1, (ArrayList <Exp>)e2, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_dcl_cnt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // block ::= BEGIN exp15 END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("block found"); } RESULT = new Block((ArrayList <OperationCode>)e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp15 ::= var_dcl exp15 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp15 found var"); }   ArrayList <OperationCode> a = (ArrayList <OperationCode>) e2 ; a.add((OperationCode)e1); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp15",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp15 ::= statement exp15 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp15 found state"); } ArrayList <OperationCode> a = (ArrayList <OperationCode>) e2 ; a.add((OperationCode)e1); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp15",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp15 ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("exp15 found empty"); } RESULT = new ArrayList <OperationCode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp15",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= expr SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("statement found"); } RESULT = new ExpressionStatement((Exp)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= cond_stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("statement found"); } RESULT = e ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= loop_stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("statement found"); } RESULT = e ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= RETURN expr SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("statement found"); } RESULT = new Return((Exp)e) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= RETURN SEMI 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("statement found"); } RESULT = new Return() ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= BREAK SEMI 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("statement found"); } RESULT = new Break()  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= CONTINUE SEMI 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("statement found"); } RESULT = new Continue();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignment ::= variable EQUAL expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("assignment found"); } RESULT = new Assignment((Variable)v,(Exp)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignment ::= variable PLUSASSIGN expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("assignment found"); } RESULT = new PlusAssign((Variable)v,(Exp)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assignment ::= variable MINUSASSIGN expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("assignment found"); } RESULT = new MinusAssign((Variable)v,(Exp)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assignment ::= variable DIVIDEASSIGN expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("assignment found"); } RESULT = new DivideAssign((Variable)v,(Exp)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignment ::= variable MULTASSIGN expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("assignment found"); } RESULT = new MultAssign((Variable)v,(Exp)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // method_call ::= ID OPENPRANTHES parameters CLOSEDPRANTHES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("method found"); } RESULT = new MethodCall((String)e, (ArrayList<Exp>)e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // method_call ::= ID OPENPRANTHES CLOSEDPRANTHES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if( DEBUGS ){ System.out.println("method found");  } RESULT = new MethodCall((String)e,new ArrayList<Exp>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parameters ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("parameters found"); } ArrayList <Exp> a = new ArrayList<Exp>();	 a.add((Exp)e); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parameters ::= expr COMMA parameters 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("parameters found"); } ((ArrayList <Exp>)e1).add((Exp)e); RESULT = e1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cond_stmt ::= IF OPENPRANTHES expr CLOSEDPRANTHES block ELSE block 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("cond_stmt found"); } RESULT = new If((Exp)e1,(Block)e2,(Block)e3) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cond_stmt ::= IF OPENPRANTHES expr CLOSEDPRANTHES block 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("cond_stmt found"); } RESULT = new If((Exp)e1,(Block)e2,null) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cond_stmt ::= SWITCH OPENPRANTHES ID CLOSEDPRANTHES OF DOUBLEDOT BEGIN exp20 DEFAULT DOUBLEDOT block END 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("cond_stmt found"); } RESULT = new Switch((String)e1, (ArrayList <Case>)e2, (Block) e3) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp20 ::= CASE INT_CONST DOUBLEDOT block exp20 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp20 found"); } ArrayList <Case> a = (ArrayList <Case>)e3; a.add(new Case(new IntConstExp(HelperFunctions.parseInt((String)e1)),(Block)e2)); RESULT = a ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp20",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp20 ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("exp20 found"); } RESULT = new ArrayList <Case>() ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp20",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // loop_stmt ::= FOR OPENPRANTHES assignment SEMI expr SEMI assignment CLOSEDPRANTHES block 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new For((Block)e4,(Assignment)e1,(Exp)e2,(Exp)e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // loop_stmt ::= FOR OPENPRANTHES assignment SEMI expr SEMI expr CLOSEDPRANTHES block 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new For((Block)e4,(Assignment)e1,(Exp)e2,(Exp)e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // loop_stmt ::= FOR OPENPRANTHES assignment SEMI expr SEMI CLOSEDPRANTHES block 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new For((Block)e4,(Assignment)e1,(Exp)e2, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // loop_stmt ::= FOR OPENPRANTHES SEMI expr SEMI assignment CLOSEDPRANTHES block 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new For((Block)e4,null,(Exp)e2,(Exp)e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // loop_stmt ::= FOR OPENPRANTHES SEMI expr SEMI expr CLOSEDPRANTHES block 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new For((Block)e4,null,(Exp)e2,(Exp)e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // loop_stmt ::= FOR OPENPRANTHES SEMI expr SEMI CLOSEDPRANTHES block 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new For((Block)e4,null,(Exp)e2,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // loop_stmt ::= REPEAT block UNITL OPENPRANTHES expr CLOSEDPRANTHES SEMI 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new Repeat((Block)e1,(Exp)e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // loop_stmt ::= FOREACH OPENPRANTHES ID IN ID CLOSEDPRANTHES block 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("loop_stmt found"); } RESULT = new ForEach((Block)e3, (String)e1, (String)e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr binary_op expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("expr found"); }RESULT = ((BinaryExp)e2).SetBinaryExp((Exp)e1,(Exp)e3);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= OPENPRANTHES expr CLOSEDPRANTHES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("expr found"); } Parentheses a = new Parentheses(); a.setUnary((Exp)e); RESULT = a ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= method_call 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("expr found"); } RESULT = e;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= variable 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("expr found"); } RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= const_val 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("expr found"); }RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= MINUS expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("expr found"); }Unary a = new AST.exp.unaryExpression.Minus();a.setUnary((Exp)e) ;RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= TILDA expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("expr found"); } Unary a = new AST.exp.unaryExpression.Not();a.setUnary((Exp)e) ;RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= assignment 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if( DEBUGS ){ System.out.println("expr found"); }RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= MM variable 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("variable found"); } MMPrefix a = new MMPrefix() ; a.setUnary((Exp)e) ;RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= PP variable 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("variable found"); } PPPrefix a = new PPPrefix() ; a.setUnary((Exp)e) ;RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= variable MM 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("variable found"); } MMPostfix a = new MMPostfix() ; a.setUnary((Exp)e) ;RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= variable PP 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("variable found"); } PPPostfix a = new PPPostfix() ; a.setUnary((Exp)e) ;RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= SIZEOF OPENPRANTHES type CLOSEDPRANTHES 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if( DEBUGS ){ System.out.println("statement found"); } RESULT = new SizeOf((String)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variable ::= ID exp23 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("variable found"); }  if(((ArrayList <Exp>)e2).size()==0){RESULT = new SimpleVariable((String)e1);}else{RESULT = new ArrayVariable((String)e1,(ArrayList <Exp>)e2);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // variable ::= variable DOT variable 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if( DEBUGS ){ System.out.println("variable found"); } RESULT = new RecordVariableUse((Variable)e1, (Variable)e2);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exp23 ::= OPENBRAK expr CLOSEDBRAK exp23 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("exp32 found"); } ArrayList <Exp> a=(ArrayList <Exp>)e1;a.add((Exp)e2); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp23",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp23 ::= 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("exp23 found"); } RESULT = new ArrayList <Exp>() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp23",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binary_op ::= arithmatic 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("binary op found");RESULT = (BinaryExp)e; } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binary_op ::= conditional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("binary op found"); }RESULT = (BinaryExp)e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arithmatic ::= PLUS 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Plus();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arithmatic ::= MINUS 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Minus();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arithmatic ::= MULT 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Mult();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arithmatic ::= DIVIDE 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Divide();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arithmatic ::= MOD 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Mod();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arithmatic ::= AND 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.And();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arithmatic ::= OR 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Or();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // arithmatic ::= CAROT 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("arithmatic found"); } RESULT = new AST.exp.binaryExp.arithmatic.Carot();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // conditional ::= EQEQUAL 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new EqEqual(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // conditional ::= NOTEQUAL 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new NotEqual();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // conditional ::= BIGEQUAL 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new GreaterEqual();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // conditional ::= SMALLEQUAL 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new SmallerEqual();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // conditional ::= SMALLER 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new Smaller();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // conditional ::= BIGGER 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new Greater(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // conditional ::= ANDC 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new AST.exp.binaryExp.conditional.And();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // conditional ::= ORC 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new AST.exp.binaryExp.conditional.Or();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conditional ::= NOTC 
            {
              Object RESULT =null;
		 if( DEBUGS ){ System.out.println("conditional found"); } RESULT = new AST.exp.binaryExp.conditional.Not();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // const_val ::= INT_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("const val found by INT_CONST"); } RESULT = new IntConstExp(HelperFunctions.parseInt((String)e)) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // const_val ::= REAL_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("const val found by REAL_CONST"); } RESULT = new RealConstExp(Double.parseDouble((String)e)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // const_val ::= CHAR_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("const val found by CHAR_CONST"); } RESULT = new CharConstExp(((String)e).charAt(0)) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // const_val ::= BOOL_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("const val found by BOOL_CONST"); } RESULT = new BooleanConstExp(((String)e).equals("true" )? true : false ) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // const_val ::= STRING_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("const val found by STRING_CONST"); } RESULT = new StringConstExp((String)e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // const_val ::= LONG_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if( DEBUGS ){ System.out.println("const val found by LONG_CONST"); } RESULT = new LongConstExp(new Long(((String)e).substring(0,((String)e).length()-1)));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_val",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
